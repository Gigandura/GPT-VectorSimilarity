A-BIM-based-method-to-plan-indoor-paths_2020_Automation-in-Construction.txt
Contents lists available at ScienceDirect
Automation in Construction
journal homepage: www.elsevier.com/locate/autcon
A BIM-based method to plan indoor paths
Ahmed Hamieha, Aicha Ben Makhloufa,b, Borhen Louhichic, Dominique Deneuxa,∗
a Université Polytechnique Hauts-de-France LAMIH, UMR CNRS 8201, Le Mont-Houy, Valenciennes CEDEX 9 59313, France
b LATIS, ENISo, University of Sousse, Sousse 4023, Tunisia
c LMS, ENISo, University of Sousse, Sousse 4023, Tunisia
A R T I C L E I N F O
Keywords:
Path planning
Indoors
Mobility
BIM
IFC
A B S T R A C T
Humans more and more live in urban areas and spend the majority of their time indoors, while buildings are
becoming increasingly interconnected. Path planning in complex indoor environments is consequently becoming
a societal challenge. This paper proposes a system, called BiMov, dedicated to automatically determining plan
paths in complex buildings based on a digital mock-up (a BIM in IFC format). The originality of the research
comes from the separation of the BIM model topological analysis from the semantic and geometric consideration
of the customer of the path planning service. The process consists in exploiting the semantic, geometric, and
topological features of the constituents of a BIM to generate navigation graphs that take the proﬁle of MOoP
(Mobile Object or Person) and the operational accessibility status of spaces and transitions (such as doors or
stairs) into account. The ultimate aim is to determine the optimal path according to given criteria. The system is
based on four data models: (1) a building model derived from the original BIM that represents and structures the
building features relevant to indoor mobility; (2) a MOoP model representing its bulk size, ability to move
horizontally and vertically, and various authorisations; (3) a calendar model representing the conjectural ac-
cessibility status of spaces and transitions; (4) a navigation graph model proposing three levels of detail. The
Macro level represents a simple graph of connectivity between neighbouring interior spaces and is intended to
help architects verify their design in terms of accessibility. The External level is used to connect accessible spaces
via their common horizontal or vertical transitions. This level is intended for MOoPs that do not require a
detailed description of the path. The Internal level integrates meshing of each space: a 2D mesh for planar
mobility or a 3D mesh for drones. This level is intended for MOoP such as heavy object handlers or autonomous
mobile vehicles that need to validate a reliable path within spaces containing furniture, hazardous machinery, or
bulky equipment. We developed a prototype software application that illustrates our approach for diﬀerent path
planning scenarios in a BIM model generated outside this project.
1. Introduction
Path planning has become a basic service in modern society.
Travelling in unknown outdoor environments is now much easier
thanks to the Global Positioning System (GPS)-based technologies.
Smart applications make it possible to ﬁnd an optimal route, taking into
account public transportation schedules, detours, traﬃc congestion,
and the proﬁle of the MOoP (Mobile Object or Person). Today, over
50% of humans live in urban areas [1] and spend more than 90% of
their time indoors [2] and buildings are becoming increasingly complex
and interconnected [3]. That's why, path planning in indoor environ-
ments is becoming increasingly necessary [4]. Modern metropolitan
buildings are characterized by large numbers of irregularly shaped
spaces, diﬀerent types of transitions between spaces on the same ﬂoor
and between diﬀerent ﬂoors. The situation is similar in large industrial
plants. However, there are also restricted areas because of hazards,
social or technical conventions. In addition, the dynamic behaviour of
the accessibility status of the spaces has to be taken into account due to
maintenance or incidents [5, 6]. Consequently, path planning in indoor
environments can become a complex issue, generating interesting re-
search challenges and calling for novel solutions that will be beneﬁcial
to building occupants, building managers, ﬁrst-time visitors, and
maintenance operators, in their daily needs to move around these
complex buildings.
Indoor path planning has been widely studied in the ﬁeld of ro-
botics, be it dedicated to real robots in real environments or to agents in
virtual environments [7]. In both cases, to be able to navigate auton-
omously, the mobile item must construct or possess a representation of
https://doi.org/10.1016/j.autcon.2020.103120
Received 7 July 2019; Received in revised form 31 January 2020; Accepted 3 February 2020
∗ Corresponding author.
E-mail address: dominique.deneux@uphf.fr (D. Deneux).
Autom
ation in Construction 113 (2020) 103120
Available online 02 M
arch 2020
0926-5805/ ©
 2020 Elsevier B.V. All rights reserved.
T
the environment that carries enough semantics (location of obstacles,
routes, or gates through obstacles), topological information (How are
the routes connected to each other?), and geometrical information
(How long is each route section? How wide is every obstacle? How wide
is every gate?). Path planning represents a fundamental research pro-
blem for various applications and lifecycle stages of buildings in the
AEC industry [6, 8, 9], such as studying emergency evacuation sce-
narios to check the conformity of the building at the design stage and
route ﬁnding to guide workers, equipment or trucks on a construction
site or to assist visitors or maintenance operators in an unknown en-
vironment.
Indoor path planning generally refers to ﬁnding an optimal path for
MOoPs (pedestrians, persons with reduced mobility, autonomous mo-
bile robots or driven vehicles) between two diﬀerent locations inside a
building, avoiding static obstacles (walls, columns) or dynamic ob-
stacles (movable walls, mobile obstacles). It is assumed that these
models representing the building interiors might be useful to determine
indoor paths automatically. Two types of indoor paths can be dis-
tinguished in the literature. Graph models are more widely used for
pedestrian navigation and grid models are encountered more for robot
navigation [10, 11]. In addition, an intelligent path planning system
should take into account the proﬁle of the MOoPs, their preferences,
their ability to move, as well as the conjectural status of the interior
spaces and transitions. The research topic addressed in this manuscript
refers to automatic control, more precisely to supporting the design and
optimization of complex systems (an automatically determined indoor
path plan, from a BIM). The original research method is the decoupling
of semantic, topological and geometric information interpretations to
explicit optimized path plans according multiple criteria (ability to
move, preferences, bulk, etc.). This paper deals with the issue of au-
tomatic path planning in complex buildings. An overview of the sci-
entiﬁc literature is presented in the following starting with the choice of
a building model likely to represent a complex building from a navi-
gation point of view.
2. State of the art
This section reviews the essential components relating to path
planning and the scientiﬁc work regarding this issue such as building
models, navigation models, routing models, and a review of diﬀerent
applications of automatic path planning.
2.1. Building models
To execute automatic indoor path planning, it is necessary to have a
model representing detailed information about the building interior
including semantic, topological, and geometric features of the building
components in relation to path planning such as places to visit (spaces),
obstacles (walls, slabs, columns), and gates through obstacles (doors,
stairs, ramps, lifts, windows, escalators) [5, 12]. Several standard
models represent buildings in much more detail than generic CAD
models. Among them, BIM (Building Information Models) in IFC format
(Industry Foundation Classes) and GIS (Geospatial Information Sys-
tems) models such as CityGML and IndoorGML [13, 14] embed precise
geometric data in 3D, but also semantic data to identify the internal
constituents of a building as well as their inter-relations.
The IFC (Industry Foundation Classes) format covers all stages in the
lifecycle of a building, from its design to its dismantling and is now a
worldwide standard (ISO 16739) for BIM developed by BuildingSmart.
With this format, it is possible to store both advanced geometric and
semantic information about building components [15]. In IFC, the
physical elements of the buildings can be represented according to
highly semantic entities (wall: IfcWall, slab: IfcSlab, space: IfcSpace,
etc.), their 3D geometry, their manifold attributes and detailed char-
acteristics that are gathered in sets of properties (called P-Set), as well
as the spatial relations, aggregation or composition between all these
elements [15, 16].
CityGML is a Geospatial standard developed and maintained by
OGC (Open Geospatial Consortium) for the representation, storage, and
exchange of virtual 3D models of cities and outdoor facilities [17, 18].
CityGML is structured around ﬁve levels of detail (LOD0 to LOD4).
LOD4 represents the interior of buildings, combining geometric and
semantic information [19].
BIM in IFC and CityGML models are both weak from a topological
point of view, not in relation to the geometric data but in terms of the
semantic data. The notion of neighbourhood or vicinity between spaces
is not explicit and so artiﬁcial reasoning encompassing semantic, geo-
metric, and topological data is necessary to determine whether a space
is connected to another space by means of a door (horizontal connec-
tion) or a lift (vertical connection). For example, in an IFC model, the
IfcRelSpaceBoundary spatial relationship provides information about
the
physical
and
virtual
borders
of
spaces,
whereas
IfcRelContainedInSpatialStructure
provides
information
about
the
content of the spatial elements of a ﬂoor or a space [17], which can be
exploited to search for walls common to two spaces.
IndoorGML is also an OGC standard that aims to provide a common
framework to represent the interior of buildings and an exchange
format for indoor spatial information. An important concept of
IndoorGML is the cellular space (indoor space as a set of cells identiﬁed
and localized), providing semantics about the connectivity between
cells (notably navigability: passage or obstacle). It is combined with 2D
or 3D geometry, and the topology of the spaces is explicit. Connectivity
is made explicit by a representation dual to the geometric model, in the
form of graphs. Multi-layered representation of graphs is available to
represent several kinds of connectivity (physical spaces, Wi-Fi areas,
Bluetooth areas, RFID areas) [20].
The latter three models can serve as the basis for automatic indoor
path planning. Ryoo et al. [21] studied CityGML and IndoorGML from
diﬀerent points of view, including their representations and theirs ap-
plications. From a geometric and semantic point of view, the study
shows that CityGML is richer than IndoorGML thanks to the geometric
representation based on GM-Solid for spaces and GM-MultiSurface for
building components such as walls, doors, and indoor installations, as
well as numerous characteristics assigned to the surfaces of the com-
ponents. From a topological point of view, as IndoorGML is dedicated to
indoor navigation applications, it is far richer than CityGML. However,
its use is rather limited (in particular for IndoorGML) compared to the
IFC standard. An IFC model has a rich geometry that integrates the
concepts of Constructive Solid Geometry (CSG), Boundary representa-
tion (B-Rep), Swept Solid, clipping, bounding Box, etc. [15]. This rich
geometric format makes it suitable to be converted into other formats,
whereas the surface model is necessary in CityGML LOD4 [17]. Al-
though IFC and CityGML are not speciﬁcally designed to support indoor
path planning, they could be good supports for the automatic creation
of navigation graphs based on semantic, geometric, and topological
reasoning about the building constituents and their relations. However,
using an IFC model as input seems preferable because of its maturity
and the large number of users of this technology worldwide.
2.2. Navigation models
One approach to automatic path planning across internal navigation
routes is known as the cell decomposition approach [22]. It consists in
discretizing internal spaces in cells with predeﬁned shapes to char-
acterize the interior environments and discriminate obstacles. This
approach provides an implicit modelling ability to capture adjacency
between neighbouring cells. Two main types of tessellation can be
distinguished: (1) regular tessellation, which consists in discretizing
spaces into uniform cells, most often square or rectangular cells; and (2)
irregular tessellation, which aims to provide an adaptive decomposition
of spaces that can provide an exact representation of the internal geo-
metric complexity. The cells forming irregular partitions of spaces can
A. Hamieh, et al.
Autom
ation in Construction 113 (2020) 103120
2
be diﬀerent shapes and sizes. The cell decomposition approach is
usually used to plan the path of robots in limited environments because
the number of cells required increases proportionally with the surface
of a space.
Another popular approach, which does not suﬀer from the same
drawback, is based on graphs [23]. A graph is an implicit representa-
tion of the interior environment showing an internal roadmap. It is
notably used for path planning in large environments, unlike cell de-
composition methods, because a single node of a graph can be used to
represent any space. Two standardized types can be distinguished for
graph-based approaches. The ﬁrst is the visibility graph [24] in which
nodes represent the corners of spaces and boundary vertices of obstacles
or gates (such as doors). The edges of the graph are the connections
between mutually visible nodes. The second type is the generalized
Voronoï graph [25], which consists in creating a set of nodes that are
the farthest from any obstacles. These nodes are then connected by
edges to generate roadmaps ensuring a maximal safety distance from
every obstacle; edges that are too close to the obstacles are removed
from the roadmap. These standardized methods were initially designed
for robot path planning but can be adapted for all types of navigation,
including pedestrian navigation [26]. Several graph models such as the
dual graph [27], Medial Axis Transformation (MAT) [28], and the
Centerline Graph [29] have been proposed and adapted for human
navigation. Some authors have also applied the hierarchical graph to
model complex indoor environments for pedestrian navigation pur-
poses [4].
2.3. Automatic BIM-based path planning approaches
Several recent research articles report extracting and managing
geometric and semantic information from IFC for various applications
in the AEC industry such as BIM-based quantity take oﬀ [30], con-
struction cost estimation [31, 32], and automatic rule-based checking
[33, 34]. Indoor path planning is gaining interest and there are several
approaches that are based on a BIM model to generate an indoor na-
vigation model. In [8], the authors developed an automated system
called InSightBIM-Evacuation to help designers and owners check
evacuation regulation compliance of BIM data. The authors propose
analyzing the properties of each building component to implement local
evacuation regulations. In [35], the authors proposed a framework
called EvacuSafe to evaluate the evacuation safety performance of a
building. Multi-criteria risk indices, ﬁre simulation tools, the integra-
tion of agent based modelling and building information models are
considered to elaborate the system. The authors in [36] developed a
BIM-Game system prototype that integrates BIM and computer games
for interactive architectural visualization. The system comprises three
major components: BIM, crossover, and game. The BIM module sends
and receives BIM information to and from the crossover module, which
processes intermediate information and facilitates communication be-
tween the BIM and the game environments. The game module connects
to the crossover and allows individuals to interact with the BIM model
in real-time to evaluate its design quality during Design-Play. These
connections bridge diverse areas such as building modelling, equipment
simulation and visualization, collision detection, and navigation and
path planning. The prototype [36] is available for Revit models only
and has not been developed for standard IFC models yet.
In the operating phase, Lin et al. [6] developed a method to cope
with path planning in 3D indoor spaces based on an IFC ﬁle. The
method comprises three main steps: (1) extraction of both geometric
and semantic information about the building components from the IFC
data; (2) sampling and mapping of the extracted information in a planar
grid; (3) application of the fast marching method (FFM) algorithm to
ﬁnd the shortest path in the grid. In this approach, the authors propose
new Psets (property sets) to extend the IFC schema and enhance its
semantics. Taneja et al. [37] developed algorithms to automatically
generate navigation models from IFC data. The authors identify three
types of navigation models: one based on the median of each space
(centerline network), a second one based on the dimensions of the
building components (metric network), and a third one based on a 2D
grid of each ﬂoor. In the operating phase, Lin et al. [6] developed a
method to cope with path planning in 3D indoor spaces based on an IFC
ﬁle. The method comprises three main steps: (1) extraction of both
geometric and semantic information about the building components
from the IFC data; (2) sampling and mapping of the extracted in-
formation in a planar grid; (3) application of the fast marching method
(FFM) algorithm to ﬁnd the shortest path in the grid. In this approach,
the authors propose new Psets (property sets) to extend the IFC schema
and enhance its semantics. Taneja et al. [37] developed algorithms to
automatically generate navigation models from IFC data. The authors
identify three types of navigation models: one based on the median of
each space (centerline network), a second one based on the dimensions
of the building components (metric network), and a third one based on
a 2D grid of each ﬂoor.
In [38], Koch et al. developed a BIM-based augmented reality ap-
plication, augmented with indoor markers such as exit signs or ﬁre
extinguishers. Their application aims to help maintenance workers ﬁnd
a possible path.
In [39], the automated construction of a Variable Density Network
(VDN) is proposed to determine egress paths in dangerous environ-
ments. The 3D BIM model was created in Revit and exported to a sur-
face representation stored in gbXML format. In this network, nodes
represent spaces, whereas links represent adjacency relationships be-
tween those spaces. In this paper, the authors use Dijkstra's algorithm to
ﬁnd the shortest path in the constructed indoor network. Subsequently,
to exploit the indoor network developed in [39, 40] better, the authors
developed an algorithm based on a novel approach integrating the
Analytic
Hierarchy
Process
(AHP),
Dijkstra's
classical
algorithm,
Duckham-Kulik's algorithm, and three criteria: hazard proximity, dis-
tance/travel time, and route complexity.
Lee et al. [41] deﬁne a computational method for measuring
walking distances within a building based on a length-weighted graph
structure for a given building model. It is implemented as a plug-in
software extension in Solibri Model Checkers. The concept is to create
links between doors (door-to-door) and between vertical transitions
(stairs-to-stairs).
In [42], an “environment aware beacon deployment” algorithm
coupled with BIM is proposed to support a sequence-based localization
schema for locating ﬁrst responders and occupants trapped in a
building ﬁre, where BIM is integrated to provide the geometric in-
formation of the sensing area and evaluate the sensor deployment ef-
fort.
Some authors have attempted to combine and extend BIM and
CityGML. For example, Isikdag et al. [13] developed a BIM Indoor-
Oriented Data Model (BO-MI). They transferred a BIM model to a geo-
located environment (based on ArcGIS), preserving all the geometric
and semantic information needed to study indoor navigation. The
pattern of the enriched model is similar to the IFC model. In [12], the
authors developed an Indoor Emergency Spatial Model (IESM) based on
IFC, dynamic information, and outdoor information. The system is
dedicated to indoor or outdoor navigation in case of disasters. In [43],
authors proposed a system to study the indoor building model which
can support the barrier-free path-ﬁnding. They described methods to
extract indoor space elements and to deﬁne the geometry layer, the
topology layer and the semantic layer in order to ﬁnd the path of an
ordinary patient or a wheelchair. Unfortunately, they didn’t consider
other types of users such as medical staﬀ and heavy objects handlers
like the drone. In [44], a BIM-based multi-purpose geometric network
model (MGNM) is proposed and the strategy of indoor and outdoor
network connections is explored. The IFC-to-MGNM conversion in-
cludes (1) extraction of building information from IFC, (2) isolation of
the MGNM information from the aforementioned building information,
and (3) creation of the topological relationships of the MGNM in the
A. Hamieh, et al.
Autom
ation in Construction 113 (2020) 103120
3
GIS Geodatabase.
2.3.1. Approaches comparison and open issues
With a view to highlighting open issues, a comparative study of the
approaches mentioned above is summarized in Table 1 according to
diﬀerent criteria in relation to automatic indoor path planning re-
quirements. These include whether they respect the IFC standard,
whether they are applicable to both vertical and horizontal mobility,
whether they consider diﬀerent MOoP proﬁles, the conjectural acces-
sibility of spaces, the possible presence of hazardous areas, and the
possibility of extending the path planning to outdoors.
The comparison in Table 1 shows that it is diﬃcult to ﬁnd a fully
generic approach for indoor path planning. (1) Path planning is almost
always addressed statically, without taking into account the variable
status of the building spaces and gates that require alternative routing
due to hazardous maintenance works or temporary modiﬁcations of the
building's operating conditions. (2) Path planning focuses on pedestrian
navigation, without taking into account other types of MOoPs such as
wheelchairs, robots, and rolling or ﬂying objects. (3) The approaches
implicitly consider empty spaces in which no particular restrictions on
movement apply, although it is obviously not the case in residential
buildings due to furniture, and in industrial facilities because of ma-
chines and hazardous areas.
2.3.2. Resolutions
Further research is required to take into account the dynamic status
of the spaces, the proﬁle of the MOoPs that are likely to circulate in the
building, and the contents of the spaces to propose a suitable path.
These criteria should be combined to propose a more generic approach
that could overcome the shortcomings of existing methods. The fol-
lowing section details the components of an original approach to au-
tomatic path planning based on a BIM in IFC.
The aimed output path is the optimal path (feasible and shortest)
and the cost function we used is the distance. In fact, the best path for a
pedestrian is not necessarily the best one for a robot, a pallet truck, a
wheelchair, or a drone. Restrictions regarding spaces or gates may be
related to the physical features of a given MOoP (overall size, weight),
the permitted mobility modes (ability to move horizontally and verti-
cally, to climb stairs or ramps, to turn, to ﬂy), social or technical au-
thorisations (visitor, employee, security staﬀ, VIP), or regulatory rea-
sons, as suggested in enterprise circulation guides [47]. So, a model of
each MOoP susceptible to require a path planning service is needed.
Furthermore, the indoor environment of a building may undergo
planned temporary changes due to heavy maintenance works (a gamma
radiation shot in a nuclear power plant to survey the piping network,
for example), or modiﬁcations to the building's operating conditions
due to weekly or daily opening hours. Some unplanned modiﬁcations
may also be derived from an incidental situation as soon as it is de-
tected, such as an escalator malfunction. These changes impact the
possibilities of movement. A model of planned or detected events
should be managed in a calendar for every space and transition in the
building.
3. Proposed approach
The proposed system is called BiMov and is for automatic indoor
path planning in complex buildings. Path planning is structured around
three levels of navigation graphs: Macro, External, and Internal. The
Macro graph was built to deﬁne the topological model of the interior of
a building, establishing a connectivity graph of all the interior spaces.
This level allows architects to validate architectural designs in terms of
accessibility, i.e., to check that all the spaces are connected and that
there are no isolated spaces. The External graph clariﬁes the possible
paths between spaces, avoiding structural obstacles (walls, columns).
The Internal graph details the possible paths avoiding the obstacles
(furniture, machinery, equipment) inside each space.
The path ﬁnding method in BiMov is illustrated in Fig. 1.
First, the elements relevant to path planning are extracted from the
building model in IFC according to their nature (semantical analysis).
Spaces are the places to be visited; walls, slabs, and columns are ob-
stacles preventing mobility; and doors, stairs, ramps, lifts, escalators,
and openings in walls are gates across obstacles. The relations between
these elements are then analyzed from topological and geometrical
points of view, and processed algorithmically to explain the notion of
neighbourhood between spaces. An example of topological analysis is if
the physical border of a space contains an opening ﬁlled with a door
element, then the door is a potential gate to access the space. An ex-
ample of a geometrical analysis is if a slab is crossed locally by a
stairway in every dimension of the Euclidean space (X,Y,Z), then the
stairway is a potential gate to access the space possessing this slab. An
example of algorithmic reasoning is if a door is a gate to two diﬀerent
spaces, then this door is a transition between the two spaces. In the
Macro graph, each space is represented by a node arbitrarily located at
the center of gravity of the space envelope. An edge is created between
every pair of nodes connected by a common gate. In the External graph,
an edge is created between each space and each of its gates. Therefore,
the Macro graph represents a simple connectivity graph between all the
spaces connected to each other, whereas the External graph details all
the sequences of spaces and transitions that can potentially be traversed
by a MOoP, regardless of its nature, abilities or preferences and re-
gardless of the accessibility status of the spaces and transitions. An
Internal graph is then created in each space, in 2D (on the ﬂoor) for
ground mobility and in 3D for drone mobility. It consists of a mesh
connecting a randomly generated set of internal nodes of controlled
density. The density inﬂuences the precision of the path that will later
be computed.
Both the External and Internal graphs are likely to be reduced
(nodes and arcs may be removed from the graph) according to the
proﬁle of the MOoP or to the conjectural accessibility status of the
spaces and transitions.
The characteristics of a MOoP are extracted from its MOoP data
model, which represents all the characteristics of the MOoP in relation
to path planning such as its physical bulk, its authorisations, its capa-
cities, and movement restrictions. The accessibility status of the spaces
is extracted from a calendar data model [48-50].
To illustrate the path planning process, we suppose the graph
G = (Vaccessible,Eaccessible) where:
Table 1
Comparative study of the approaches.
Criteria
Life cycle phase
Design
Construction
Operation
Compliance with IFC standard
[8, 35, 42]
–
[37, 39, 41, 44]
Horizontal and vertical navigation
[8, 35, 36]
–
[4, 6, 10, 12, 43]
Consideration of the MOoP proﬁle
–
[45, 46]
–
Consideration of space dynamics
[36]
–
[12, 38, 43]
Consideration of hazardous areas
–
[45, 46]
–
Consideration of outdoor paths
–
[45, 46]
[12, 13, 44]
A. Hamieh, et al.
Autom
ation in Construction 113 (2020) 103120
4
– Vaccessible: is the node set representing the accessible spaces indicated
available in the calendar model.
– Eaccessible : is the set of the arcs representing accessible paths con-
necting the spaces, such as if (v1,v2) ∈ Eaccessible, then there is an arc
from the node v1 ∈ Vaccessible to the node v2 ∈ Vaccessible.
–
 
=
→
+
C
Eaccessible
is a weighting of the arcs.
The weight of the path (e1,…,ek) joining two nodes is expressed as: ∑
iC(ei), which represents the sum of the weights of the arcs that compose
it. To ﬁnd the optimal path we apply the theory of Dijkstra: given a pair
of nodes: vstart (the node of departure) and vend (the node of arrival), the
algorithm ﬁnds a path from vstart to vend of lower weight (i.e., the shorter
path).
3.1. BiMov data models
The proposed system is based on four data models: (1) a building
model; (2) a MOoP model; (3) a calendar model; and (4) a navigation
model. These models are detailed in the following sections.
3.1.1. Building model
This model is speciﬁcally designed to represent indoor environ-
ments for path planning purposes. The basic classes of the BiMov
building
model
are:
Indoor_Space,
Horizontal_Transition,
Vertical_Transition, and Obstacle. The class diagram of the building
model is represented in Fig. 2.
• The Indoor_space class is fundamental for interior path planning. A
space in BiMov is represented by a 3D volume bounded by building
elements such as walls, doors, windows, and optionally contains
furniture or equipment. Spaces are associated with a ﬂoor by means
of an aggregation relationship. The main attributes assigned to the
Indoor_space class are Name, GlobalID, Height (higher, lower, and
net), surface area, type, and minimum administrative authorisations
required to access it. Authorisations are represented by a vector Ha
(X) of size m in which the index X refers to a requirement (ability to
see, ability to hear) or an authorisation (electrical qualiﬁcation,
security authorisation) and a value, between 0 and 100, the
minimum level required for a MOoP to navigate in the space. For
example, if Ha(i) is 0, it means that a MOoP does not need any
special authorisation i to access this space.
• The Horizontal_Transition (HT) class: a HT connects neighbouring
spaces located on the same ﬂoor. HT is a generalization of the
classes Door, Opening, and Window. The attributes assigned to each
class are visible in Fig. 2.
• The Vertical_Transition (VT) class: a VT connects neighbouring
spaces located on diﬀerent ﬂoors. VT is a generalization of the
classes Stair, Lift, Escalator, and Ramp. The attributes assigned to
each class are visible in Fig. 2.
• The class Obstacle is a non-navigable area because it is occupied by
a permanent physical building constituent. The Obstacle class is a
generalization
of
the
classes
Wall,
Column,
Furniture,
and
Equipment. The classes Furniture and Equipment are identiﬁed
diﬀerently. Equipment, conversely to Furniture, can convey the
notion of hazardous area, which induces a buﬀer distance to pre-
serve the MOoP's safety when circulating in its neighbourhood.
Fig. 1. Workﬂow of BiMov system.
A. Hamieh, et al.
Autom
ation in Construction 113 (2020) 103120
5
3.1.2. MOoP model
One of the originalities of BiMov is the consideration of MOoP
proﬁles in the search for an adequate path. For this purpose, BiMov
integrates a MOoP data model, collecting in a vector all the important
features characterizing what a MOoP Is (length, width, height, mass,
average speed, max speed, max slope), Prefers (stairs, escalators, large
spaces, etc.), and Is Able to do (see, hear, rotate around z, climb stairs,
climb ramp, electric ability, authorisation level, etc.) with respect to
mobility. The average speed (V) will be useful to estimate the time to
destination. The authorisations depend on the function and the hier-
archical level. The content of the MOoP model is summarized in
Table 2.
All the values in the Ha vector are standardized with real values
representing a percentage of the maximum allowance or ability (Fig. 3),
from zero (e.g. an intruder) to 100 (e.g. the Chief security oﬃcer).
The reference point of a MOoP is arbitrarily placed at the center of
gravity of the bounding box envelope. In the case of planar navigation
(2D scenario), i.e. the MOoP is a person or a rolling object, the reference
point of the MOoP is projected onto the ﬂoor.
A distance D (in mm) is associated with each MOoP in order to
summarize its physical bulk. D is used as a safety distance with respect
to every obstacle. This distance depends on the physical dimensions of
the MOop (L, l, and H), as well as its ability to move (Tx, Ty, Tz) and to
turn (Rx, Ry, Rz). In the case of walking or rolling MOoP (when the
rotation around X and Y is blocked), the distance D = Dxy is calculated
from the longitudinal (L) and transverse (l) dimensions and the
minimum yaw radius (Rz). D is equal to half of the swept width (Sw)
Fig. 2. Class diagram of the BiMov building model.
Table 2
Relevant features of a MOoP.
Type
Description
L
Length [mm]
Longitudinal dimension of the bounding box (along the X
axis)
l
Length [mm]
Transversal dimension of the bounding box (along the Y
axis)
H
Length [mm]
Vertical dimension of the bounding box (along the Z axis)
Tx
Boolean
Ability to move along the X axis of the MOoP (T/F)
Ty
Boolean
Ability to move along the Y axis of the MOoP (T/F)
Tz
Boolean
Ability to move along the Z axis of the MOoP (T/F)
Rz
Length [mm]
Yaw radius, or − 1 if the rotation is blocked
Rx
Length [mm]
Roll radius, or − 1 if the rotation is blocked
Ry
Length [mm]
Pitch radius, or − 1 if the rotation is blocked
M
Mass [kg]
Mass of MOoP
P
Angle [deg]
Maximum allowable slope
S
Boolean
Ability to climb stairs (T/F)
V
Speed [m⋅s−1]
Average speed of the MOoP
Ha[]
Array of reals
List of preferences and allowances
A. Hamieh, et al.
Autom
ation in Construction 113 (2020) 103120
6
when the MOoP turns with the minimal radius permitted by its yaw
ability (Fig. 4) such as:
=
=
−
Dxy
Sw
Rex
Rin
2
2
=
−
Rin
Rb
1
2
=
+
+
(
)
(
)
( )
Rex
Rb
L
1
2
2
2
2
In the case of a ﬂying MOoP, D is assigned the highest safety value:
D = Max (Dxy, Dyz, Dzx) The MOoP model is intended to be managed
by the MOoP itself by means of a subscription to an online BiMov
service (in future developments), or a MOoP proﬁle administrator (in
the current prototype), responsible for creating new MOoP models or
editing MOoP features.
3.1.3. Calendar model
To address the dynamic aspect, BiMov is based on an external ca-
lendar model, which permanently reﬂects the accessibility status of
spaces and transitions. The calendar links information about building
elements, represented by their GlobalId, with information about the
nature of the events that impact accessibility to these elements, as well
as the minimum proﬁle not impacted by these events (maintenance
engineers should continue to be allowed to access the space where
maintenance is needed, ﬁremen should be allowed to circulate every-
where even in case of ﬁre).
For each event, the calendar stores the following information:
• Type: type of event (maintenance, closure, incident…).
• Participant: minimum proﬁle to allow access despite the event.
• Location: the list of spaces and transitions aﬀected by the event.
• Date: date at the beginning and end of the event.
• Repetition: if the event must be repeated, as for opening and closure
hours.
The calendar is designed to be managed by one or more adminis-
trators, notably responsible for adding new events by specifying the
relevant characteristics, modifying, or deleting events. The calendar
must be synchronized with the navigation graphs through the GlobalId
of each space and each transition.
3.1.4. Navigation model
BiMov analyzes the interior of the building and transforms it into
more or less detailed navigation graphs, according to the requirement.
Three graph models are used in BiMov
Macro
graph:
The
Macro
graph
Gmacro
is
expressed
by
{Vmacro;Emacro} where:
– Vmacro is the node set representing the centers of gravity of indoor
spaces (Red nodes in Fig. 5).
– Emacro is the edge set representing the connections between spaces
when there is a topological relation between them (Black arcs in
Fig. 5).
Emacro = {e = (ni,nj) such as (ni,nj ∈ Vmacro) and (ni,nj are the spaces
sharing a common vertical or horizontal transition)}.
The main utility of this model is to allow architects to verify the
accessibility of all the spaces during the design phase.
External graph: The External graph Gextern is expressed by
{Vextern;Eextern} where:
– Vextern is the node set representing centers of gravity of indoor spaces
(Red nodes in Fig. 6) as well as vertical and horizontal transitions
Fig. 3. Percentage of the MOoP's allowance/ability.
Fig. 4. Swept width during a yaw.
A. Hamieh, et al.
Autom
ation in Construction 113 (2020) 103120
7
(Green nodes in Fig. 6).
– Eextern is the edge set representing the connections between each
space and its associated transitions (Black arcs in Fig. 6).
Eextern = {e = (ni,nj) such as (ni,nj ∈ Vextern) and (ni,nj represent a
couple of spaces and a transition associated with this space)}.
This model represents the set of simpliﬁed paths for MOoPs. It is
designed for proﬁles that do not need a high level of detail to reach
their destination such as pedestrians without any luggage.
Internal
graph:
The
internal
graph
Gintern
is
expressed
by
{Vintern;Eintern} where:
– Vintern is the node set generated by a mesh of controlled density (Red
nodes is Fig. 7), which can be generated either randomly or ac-
cording to a regular pattern inside a shape.
– Eintern is the edge set representing the connection between accessible
neighbouring nodes (Black arcs in Fig. 7), which can be generated
using, for example, a classical Delaunay triangulation.
Eintern = {e = (ni,nj) such as (ni,nj ∈ Vintern) and (ni,nj are the
neighbouring nodes in the mesh)}.
This model represents the set of detailed paths for MOoPs within a
space. It is designed for proﬁles that need a high level of detail to reach
their destination such as a carrier with a large forklift.
3.2. Restrictions according to a MOoP proﬁle
To consider navigation restrictions according to the proﬁle of a
MOoP, BiMov combines geometric and semantic criteria based on in-
formation extracted from the MOoP model and from the building
Fig. 5. The macro graph model. (For interpretation of the references to color in this ﬁgure, the reader is referred to the web version of this article.)
Fig. 6. The external graph model. (For interpretation of the references to color in this ﬁgure, the reader is referred to the web version of this article.)
A. Hamieh, et al.
Autom
ation in Construction 113 (2020) 103120
8
model. The geometric criterion is used to consider the MOoP bulk in the
3 dimensions, even in case of ground mobility (the ability for a mobile
robot to go through a door is checked geometrically, as well as the
ability for a drone to go through an opening in a wall); the semantic
criterion corresponds to a set of veriﬁcations based on semantic in-
formation characterizing each building element (obstacle or passage)
and each MOoP (what he/she/it can, wishes, or may).
For External graphs, only vertical and horizontal transitions are
considered to search for crossable transitions. Table 3 below sum-
marizes the main checks applied for each type of transition.
For Internal graphs, BiMoV generates a buﬀer area around obstacles
such as walls, columns, furniture or equipment. The width of the buﬀer
zone is the distance D associated with the candidate MOoP. The buﬀer
areas are considered as non-navigable zones for the MOoP, so the nodes
inside these zones are considered as inaccessible nodes and are deleted
from the internal graph. This method is inspired from the Minkowski-
Sum method [51], which has been widely used to identify inaccessible
areas for robot path planning. In the case of hazardous obstacles such as
equipment or machinery that require a minimum safety distance to be
respected, the width of the buﬀer zones are equal to D of the MOoP + D
safety (D safety is extracted from the building model as an attribute
assigned to the equipment class). Fig. 8 below illustrates the avoidance
of an obstacle by a MOoP on the ground by means of a 2D buﬀer zone.
3.3. Restriction according to the status of spaces and transitions
This section aims to describe how BiMov takes into consideration
the status of the spaces and transitions, which may vary during the
operation of the building. The calendar model identiﬁes and keeps the
status of spaces and transitions up to date. This calendar is linked to the
graph models by the names and the globalId deﬁned in the original BIM
model in IFC.
The principle is to eliminate the nodes (in the External graph), or
the sets of nodes (in the Internal graph) corresponding to spaces or
transitions that are indicated as non-available in the calendar model so
that the planned path can be determined based on accessible spaces and
transition elements only. The most obvious approach, which can be
considered as optimistic, is to check the status of the elements at the
departure time only, either immediate or planned. However, there is a
risk that an element may become unavailable at a later time, which
would prevent the MOoP from executing the planned path. To eliminate
this risk, a second approach, which can be considered as pessimistic, is
to check the availability of the elements throughout the entire planned
duration of the route. It is much more diﬃcult to compute, as the total
duration of the trip depends on the list of elements involved in the path,
whereas the path is a priori unknown. A trial and error approach can be
used by assuming that all the elements are available, computing the
optimal path, computing the duration of the trip based on the standard
velocity of the MOoP or on the standard velocity of the means of
transportation (lift or escalator), then checking whether the elements
involved are really available during the computed duration. If some
elements prove to be unavailable, the whole process is repeated with all
the elements available, except those proven to be unavailable.
Moreover, after determining a guaranteed path, some elements might
be eliminated abusively because they are unavailable during a period of
time within the duration of the trip, but might be available at the
Fig. 7. The intern graph model. (For interpretation of the references to color in this ﬁgure, the reader is referred to the web version of this article.)
Table 3
veriﬁcation applied to External level.
Geometric approach
Semantic criteria
Door
LDoor ≥ 2 * D & HDoor ≥ HMOoP
Check authorisations
Opening
LOpenning ≥ 2 * D & HOpening ≥ HMOoP
Check authorisations
Window
LWindow ≥ 2 * D & HWindow ≥ HMOoP
Check authorisations
Stairs
LStair ≥ 2 * D & lStair ≥ 2 * D & Hnetstair ≥ HMOoP
Check authorisation and ability
Lift
LLift ≥ 2 * D & lLift ≥ 2 * D & HLift ≥ HMOoP
Check authorisation and mass
Escalator
LEscalator ≥ 2 * D & lEscalator ≥ 2 * D & HnetEscalator ≥ HMOoP
Check authorisations
Ramp
LRamp ≥ 2 * D & lRamp ≥ 2 * D & HnetRamp ≥ HMOoP
Check authorisation and slope
A. Hamieh, et al.
Autom
ation in Construction 113 (2020) 103120
9
precise moment when the MOoP needs to cross them. A third solution,
which can be considered as fair, is to check the status of each element at
the exact moment when the MOoP requires to cross it. The computation
of this exact path is even more diﬃcult because the exact time of arrival
at each element has to be predicted, as well as the duration of the trip
within the element, before checking the availability of this element
during this period of time. Given suﬃcient information about the
availability/unavailability of all the spaces in the future (based on a
calendar), it must be checked whether each space of a potential path
will actually be accessible, exactly when the MOoP will require it to be
accessible. So, as to estimate this exact moment, it is necessary to use
the model of velocity of the MOoP or the speed of its transportation
means (lifts, escalators). The path computed this way is likely to be
more restrictive than the one based on the optimistic approach, but less
restrictive than the one based on the pessimistic approach. To do this,
the system ﬁrstly computes a path based on the optimistic approach and
then checks the status of all the elements in sequence, taking into ac-
count the time of arrival at this element Ti and the duration of stay ∇Ti.
If an element proves to be unavailable during ∇Ti, a new shortest path is
computed among the elements, except the unavailable ones. If the
element proves to be available during ∇Ti, the next element along the
path is checked after predicting the time of arrival at this point: Ti
+1 = Ti + ∇Ti. Therefore, the system proposes three options for
computing the shortest path taking these aspects into account (Fig. 9).
4. Implementation of the system
The purpose of this section is to describe the prototype that was
developed to illustrate the feasibility of the approach using modern
technology.
4.1. BiMov development environment
An open software development environment able to read and
browse a standard IFC ﬁle, extract the geometry, perform geometric
reasoning, and visualize this geometry in 3D was required in which we
could develop original algorithms to create a building model focused on
mobility, manage MOoP proﬁles and calendars of events, perform se-
mantic, geometric, and topological reasoning, create the Macro,
External, and Internal graphs, implement the Dijkstra's shortest path
algorithm, and display the results in 3D. The basic functionalities are
available in the IfcOpenShell open source software library [52]. IfcO-
penShell uses Open CASCADE (in short: OCC) [53] internally to convert
the implicit geometry of IFC2×3 ﬁles into explicit geometry that can be
displayed and exploited. The original algorithms based on this en-
vironment were developed in Python, a compact object-oriented
computer language independent of any Operating System, which can be
interpreted or compiled.
The data schemes to represent MOoP proﬁles, as well as calendars of
events, were implemented using MS-Excel spreadsheets. The Human
Machine Interfaces (HMI) dedicated to the administrators in charge of
editing MOoP proﬁles and calendars of events or the system users, i.e.,
building creators (architects) or building users (visitors) were devel-
oped with Tkinter, the standard HMI module of Python.
4.2. Analysis of the IFC model
Fig. 10 below illustrates the correspondences between the BiMov
building model concepts and the relevant entities of a standard IFC2*3
model. The IFC model entities that are meaningful for indoor mobility
are represented with a blue background and include IfcBuilding, Ifc-
BuildingStorey,
IfcSpace,
IfcDoor,
IfcWindow,
IfcStair,
Ifc-
TransportElement, IfcRamp, IfcWall, IfcColumn, IfcFurnishingElement,
and IfcDistributionElement. In BiMov, they correspond to the concepts
of building, ﬂoor, space, door, window, opening, stairs, transport ele-
ment (lift and escalator), ramp, wall, column, furniture (table, sofa,
chair, desk), and equipment, respectively. In IFC models, the classes
IfcDoor, IfcOpeningElement, IfcWindow are explicitly used to identify
the corresponding building elements. A horizontal transition is a pas-
sage between two neighbouring spaces located on the same level. An
opening is a gate in a wall. It may be left empty, or ﬁlled with a door or
a window. An empty opening can be crossed by a pedestrian, by a wheel
chair or by a drone. A door can be crossed by the same three MOoPs
only if they are allowed to cross the door, which represents a physical
border. A window would normally not be suggested as a transition for a
pedestrian (except in case of emergency), but cannot be used at all by a
wheelchair. However, the window remains acceptable for a drone.
The IFC model is not directly dedicated to path planning. In fact, the
topological model space connectivity is not explicit in IFS, so an algo-
rithmic treatment is necessary to make the notion of neighbourhood
between spaces implicit. In principle, two neighbouring spaces are two
spaces that share a common transition. This can be a horizontal tran-
sition, i.e. to navigate on a ﬂoor through a door, opening; or a vertical
transition, i.e. to navigate between ﬂoors via stairs, lifts, or ramps.
For
a
horizontal
neighbourhood,
the
system
exploits
the
IfcRelSpaceBoundary relation, which provides information about the
physical and virtual boundaries of every space that is useful to reveal
the notion of neighbourhood. The attributes related to this relationship
are used to identify the boundary elements (RelatingBuildingElement)
as well as the reference space (RelatingSpace). The principle is to
identify common walls with openings and common doors between pairs
of spaces. Non-closed openings or openings ﬁlled with a door or
Fig. 8. Creating a buﬀer zone around obstacles.
A. Hamieh, et al.
Autom
ation in Construction 113 (2020) 103120
10
Fig. 9. Possible options to consider the state of spaces and transitions.
Fig. 10. Correspondences between BiMov classes and IFC model entities.
A. Hamieh, et al.
Autom
ation in Construction 113 (2020) 103120
11
window suggest creating a connection between every pair of spaces
with such a common transition (non-ﬁlled opening, door, or window).
Fig. 11 illustrates the case of Door and Window.
For a vertical neighbourhood, no direct relationship between the
spaces and the vertical transitions connecting them can be extracted
from the IFC schema. BiMov uses a set of geometric and semantic al-
gorithms to match the vertical transitions and related spaces. The rea-
soning process leads to the creation of a list of neighbouring elements in
which each neighbourhood relation is expressed in the form: Space ↔
transition (vertical/horizontal) ↔ Space.
5. Validation scenarios
5.1. Data preparation
Several IFC models have been found on the Internet, including on
the University of Auckland New Zealand website (http://openifcmodel.
cs.auckland.ac.nz), which oﬀers an open base of IFC models. Other
simpler (http://ifcopenshell.com) or more complex models (http://
www.ifcwiki.org), were used during the development phase.
Several MOoP proﬁles were created of which the proﬁles are dif-
ferentiated by their size, abilities, and level of authorisation.
5.2. Graph creation
5.2.1. Macro level
In BiMov, this level can help the architect save time and reduce his/
her analytical eﬀort by automatically revealing the isolated spaces at
the design stage. Two models have been chosen to validate the utility of
this level.
For model 1 (Fig. 12), the Macro graph is represented in the OCC
interface. The ESP symbol locates the center of gravity of a space and
the red lines represent the arcs of the graph.
The results show that the design of this model is validated in rela-
tion to accessibility. The nodes that represent the interior spaces are all
connected and there is no single node, which means that all the spaces
are accessible.
However, the Macro graph generated on model 2 shows that there
are design ﬂaws in the project (Fig. 14). Several isolated spaces are
identiﬁed on the fourth ﬂoor. These isolated nodes are highlighted in
the OCC interface and are listed in the neighbourhood list collected in
an MS-Excel spreadsheet representing the arcs of the Macro graph.
Using the Macro Graph in BiMov at the design stage can help the ar-
chitect save time and reduce his/her analytical eﬀort by automatically
revealing the isolated spaces (Fig. 13).
5.2.2. External level
This scenario is based on a building model containing two staircases
and one lift. Three MOoP proﬁles are considered (Visitor, Service agent,
and Pallet truck). One of the staircases is reserved for staﬀ. The lift is
public and lift maintenance is reported in the calendar of events.
For a visitor proﬁle, the path found by BiMov is illustrated in
Figs. 15 and 16. We observe that when there is no disruption, the
shortest route for a visitor is to take the lift (Fig. 15).
The path through the stairs for staﬀ is not oﬀered to him (lack of
ability), although this path is shorter.
When the lift is unavailable, the path proposed by BiMov is to take
the public staircase, even though it is not the shortest path because a
visitor does not have the right to use the stairs reserved for the staﬀ
(Fig. 16).
In the same conditions, the path computed for the service agent
proﬁle suggests taking the stairs reserved for the staﬀ (Fig. 17).
For a pallet truck proﬁle, no path can be found when the lift is
unavailable because its ability to move does not allow it to use the stairs
(Fig. 18).
(Fig. 19) illustrates the path found for the “pallet truck” proﬁle in
the presence of the lift. Geometric checks to cross doors are validated
(the distance D associated with the pallet truck is 0.43 m, so 2*D Width
of the doors is 0.9 m and the height of the pallet truck H is less than the
height of the doors which is 2.1 m). In addition, the weight of the
seafarer is less than the maximum lift capacity. As a result, BiMov al-
lows the pallet truck to use the lift.
Fig. 11. Case of a door and a window.
A. Hamieh, et al.
Autom
ation in Construction 113 (2020) 103120
12
5.2.3. Internal level
The interest of this level is to take into account the interior of each
space, namely the possible presence of internal obstacles (furniture or
equipment) which can restrict the movement of a MOoP.
In this scenario, the interior space extracted from the building
model contains furniture, represented by their bounding box in the
Open CASDADE environment. This space is analyzed in relation to two
MOoP proﬁles (a valid biped visitor and a drone) to compute an in-
ternal optimal path for these MOoPs.
Fig. 20-1 shows the reduced 2D random mesh created on the ﬂoor,
after creating a buﬀer zone around the surrounding walls and the in-
terior obstacle footprint, taking the oﬀset value of 0.335 m reported in
the MOoP model. Fig. 20-2 shows the optimal 2D path for the biped
visitor.
Fig. 21-1 shows the reduced 3D mesh created in the volume, after
creating a buﬀer zone around the surrounding walls and the interior
obstacle, taking the oﬀset value of 0.3 m reported in the drone model.
Fig. 21-2 shows the optimal 3D path for the drone.
5.2.4. Critical analysis
In the Macro level, two building models were tested. The results
showed that BiMov allows to automate the analysis of the accessibility
of all spaces of a building, during the process of validation of an ar-
chitectural design.
In the external level, a building model capable of oﬀering diﬀerent
possibilities between the same two starting and ﬁnishing points was
used for the following purposes:
– The navigator proﬁle, depending on its geometric characteristics,
physical characteristics (weight), ﬁtness for movement (in particular
ability) can be used as a constraint to propose a shorter path adapted
to the navigator.
– The state of availability/unavailability of a space can be taken into
account to propose a path adapted to the temporal circumstances of
the search for the shortest path.
We imagined the presence of a manager (IT system administrator) in
charge of reporting the status of each space and transition of the
building. It was a simple approach for the purpose of the validation
Fig. 12. Macro graph of model 1 revealing a valid design.
Fig. 13. Macro graph of model 2 revealing a non-valid design due to isolated spaces.
A. Hamieh, et al.
Autom
ation in Construction 113 (2020) 103120
13
prototype. The perspective, if this system was implemented at a real
scale, would be to combine manual input with automatic input, by
means of a building management system, in which the status of each lift
and escalator could be controlled (switch on, switch oﬀ) and supervised
(in function/malfunctioning).
In the internal level, the same space, possibly cluttered with ob-
stacles, was used to show, in the case of horizontal navigation, that
BiMov was able to conﬁrm or deny the possibilities of indoor navigation
for a proﬁle, depending on its size, outside buﬀer zones representing the
obstacles to avoid, in 2D for a ground movement, in 3D for a movement
in space.
The BIM model is implicitly considered as a numerical twin of the
physical building. The calendar of events represents a small step toward
this situation. In a near future, with the development of the Internet of
Things (IoT), any physical component of the building, will potentially
be identiﬁed, located, supervised, this will be totally feasible. For the
moment, furniture elements can be statically, but eﬃciently re-
presented in a BIM, by “IfcBuildingElementProxy”. Considering a con-
tinuously updated numerical twin of a building or a stable BIM ﬁle in
which furniture elements are statically represented does not impact the
requirement to take into account the space occupied by these potential
obstacles.
These illustrations thus conﬁrm BiMov's ability to ﬁnd auto-
matically, where possible, the optimal path indoor, depending on the
navigator proﬁle and the conjunctural state of the spaces and transi-
tions of the building.
6. Conclusion
With the rapid development and concentration of urbanized areas,
buildings in large metropolitan areas are becoming increasingly com-
plex and interconnected. This complexity poses many challenges for
Fig. 14. Visualization of design ﬂaws in Model 2.
Fig. 15. Path for a visitor when the lift is available.
A. Hamieh, et al.
Autom
ation in Construction 113 (2020) 103120
14
managers, occupants, and visitors. Demand for ﬂuid internal mobility
calls for the need to generate automatic indoor path plans inside these
buildings.
This paper describes an original approach called BiMov for indoor
path planning. The proposed system automatically extracts and man-
ages geometric and semantic information from a building model in IFC
format to reveal the topological connectivity between spaces. The na-
vigation model is represented by graphs over three levels of detail
(Macro between spaces, External between spaces through transitions,
Internal to spaces). The External and Internal graphs are reduced ac-
cording to the proﬁle of the Mobile Object or Person (physical dimen-
sions, abilities, and authorisations) and according to the planned
availability status of each space and transition. The Dijkstra's algorithm
is used to determine the optimal path in the graphs for a MOoP. The
weights associated to the edges in the Dijsktra's algorithm represent the
Euclidean distance between the connected vertices. The open source
IfcOpenShell was used to implement the system and verify its ability to
represent diﬀerent scenarios.
This scientiﬁc research has generated signiﬁcant IT development
but this is insuﬃcient to cover the variety of cases likely to be found in
complex buildings. Future lines of research include improving the
performance and robustness of BiMov, as well as addressing new sci-
entiﬁc issues that the current limits inspire. Concerning the External
graph, the system cannot manage a situation in which there is a cor-
ridor around a central room with several transitions between the cor-
ridor and the room because each space is represented by only one node,
whereas there need to be as many nodes as there are gates leading to
the space. Concerning the Internal level, it would be interesting to
deﬁne the concept of Point Of Interest (POI) to represent indoor targets
such as a welcome desk, a cash machine or a coﬀee machine.
Fig. 16. Path for a visitor when the lift is unavailable.
Fig. 17. Path of a service agent when the lift is unavailable.
A. Hamieh, et al.
Autom
ation in Construction 113 (2020) 103120
15
Fig. 18. No path found for pallet truck when the lift is unavailable.
Fig. 19. Path of a pallet truck without disruption of the lift.
Fig. 20. Internal 2D optimal path for a biped visitor.
A. Hamieh, et al.
Autom
ation in Construction 113 (2020) 103120
16
In addition, due to the possible absence of IFC model (old buildings,
historic monuments, buildings with missing or inappropriate digital
mock-up), an important issue to consider for future research is how to
construct a BiMov model with no BIM? With the increasing use of 3D
scanners in the construction industry, the reconstruction of the BIM
model from scanned point clouds is receiving more and more attention.
With point clouds, several methods in the literature could be applied to
identify semantical data such as places to visit (spaces), obstacles
(walls, stabs, columns), and gates (stairs, doors, windows), and geo-
metrical data (dimensions), for which the original algorithms of the
BiMov initiative could be used to reveal the topological data (con-
nectivity graphs).
References
[1] I. Afyouni, Knowledge Representation and Management in Indoor Mobile
Environments, Université de Bretagne Occidentale (Brest), 2013, https://tel.
archives-ouvertes.fr/tel-00956812/document.
[2] United Nations, Department of economic and social aﬀairs, World's Population
Increasingly Urban With More Than Half Living in Urban Areas, https://www.un.
org/development/desa/en/news/population/world-urbanization-prospects.html,
(2014).
[3] T. Roberts, We Spend 90% of Our Time Indoors. Says Who? https://www.
buildinggreen.com/blog/we-spend-90-our-time-indoors-says-who, (2016).
[4] E.-P. Stoﬀel, Hierarchical Graphs as Organisational Principle and Spatial Model
Applied to Pedestrian Indoor Navigation (Ph.D. thesis), LMU Munich, 2009,
https://edoc.ub.uni-muenchen.de/106209/.
[5] L. Liu, Indoor semantic modelling for routing: the two-level routing approach for
indoor navigation, Archit. Built Environ. (17) (2017) 1–252 https://journals.open.
tudelft.nl/index.php/abe/article/view/1879.
[6] Y.-H. Lin, Y.-S. Liu, G. Gao, X.-G. Han, C.-Y. Lai, M. Gu, The IFC-based path planning
for 3D indoor spaces, Adv. Eng. Inform. 27 (2) (2013) 189–205, https://doi.org/10.
1016/j.aei.2012.10.001.
[7] T. Lopez, Path Planning and Posture Adaptation in Dynamic Environments, INSA de
Rennes, 2012, https://tel.archives-ouvertes.fr/tel-00767784.
[8] J. Choi, J. Choi, I. Kim, Development of BIM-based evacuation regulation checking
system for high-rise and complex buildings, Autom. Constr. 46 (2014) 38–49,
https://doi.org/10.1016/j.autcon.2013.12.005.
[9] C. Copot, A. Hernandez, T.T. Mac, R. De Keyse, Collision-free path planning in
indoor environment using a quadrotor, 2016 21st International Conference on
Methods and Models in Automation and Robotics (MMAR), 2016, pp. 351–356, ,
https://doi.org/10.1109/MMAR.2016.7575160.
[10] S. Zlatanova, S.S.K. Baharin, Optimal navigation of ﬁrst responders using DBMS,
3rd international conference on information systems for crisis response and man-
agement 4th international symposium on geoInformation for disaster management,
Citeseer, 2008, pp. 541–544 http://citeseerx.ist.psu.edu/viewdoc/summary?doi=
10.1.1.563.6975.
[11] A.A. Diakité, S. Zlatanova, Spatial subdivision of complex indoor environments for
3D indoor navigation, Int. J. Geogr. Inf. Sci. 32 (2) (2018) 213–235, https://doi.
org/10.1080/13658816.2017.1376066.
[12] H. Tashakkori, A. Rajabifard, M. Kalantari, A new 3D indoor/outdoor spatial model
for indoor emergency response facilitation, Build. Environ. 89 (2015) 170–182,
https://doi.org/10.1016/j.buildenv.2015.02.036.
[13] U. Isikdag, S. Zlatanova, J. Underwood, A BIM-oriented model for supporting in-
door navigation requirements, Comput. Environ. Urban. Syst. 41 (2013) 112–123,
https://doi.org/10.1016/j.compenvurbsys.2013.05.001.
[14] L. Liu, S. Zlatanova, An approach for indoor path computation among obstacles that
considers user dimension, ISPRS Int. J. Geo Inf. 4 (4) (2015) 2821–2841, https://
doi.org/10.3390/ijgi4042821.
[15] BuildingSmart, Building Smart, Industry Foundation Classes (IFC), https://
standards.buildingsmart.org/IFC/RELEASE/IFC4_1/FINAL/HTML/schema/
ifcproductextension/lexical/ifcspace.htm, (2013).
[16] C. Fu, G. Aouad, A. Lee, A. Mashall-Ponting, S. Wu, IFC model viewer to support nD
model application, Automation in Construction 15 (2) (2006) 178–185, https://doi.
org/10.1016/j.autcon.2005.04.002 http://www.sciencedirect.com/science/
article/pii/S0926580505000610.
[17] R. de Laat, L. van Berlo, Integration of BIM and GIS: The Development of the
CityGML GeoBIM Extension, (2011), pp. 211–225, https://doi.org/10.1007/978-3-
642-12670-3_13 ISBN: 978-3-642-12669-7.
[18] Open Geospatial Consortium, City Geography Markup Language (CityGML)
Encoding Standard, version: 2.0.0, https://portal.opengeospatial.org/ﬁles/?
artifact_id=47842, (2012).
[19] F. Mortari, Automatic Extraction of Improved Geometrical Network Model from
CityGML for Indoor Navigation (Ph.D. thesis),, 2013. https://3d.bk.tudelft.nl/pdfs/
FilippoMortari_thesis.pdf.
[20] H.-K. Kang, K.-J. Li, A standard indoor spatial data model-ogc indoorgml and im-
plementation approaches, ISPRS Int. J. Geo Inf. 6 (4) (2017) 116, https://doi.org/
10.3390/ijgi6040116.
[21] H.-G. Ryoo, T. Kim, K.-J. Li, Comparison between two OGC standards for indoor
space: CityGML and IndoorGML, 1:1–1:8, Proceedings of the Seventh ACM
SIGSPATIAL International Workshop on Indoor Spatial Awareness, ACM, New York,
NY, USA, 2015, , https://doi.org/10.1145/2834812.2834813.
[22] A. Swingler, S. Ferrari, A cell decomposition approach to cooperative path planning
and collision avoidance via disjunctive programming, 49th IEEE Conference on
Decision and Control (CDC), 2010, pp. 6329–6336, , https://doi.org/10.1109/CDC.
2010.5717137.
[23] L. Yang, M. Worboys, Generation of navigation graphs for indoor space, Int. J.
Geogr. Inf. Sci. 29 (10) (2015) 1737–1756, https://doi.org/10.1080/13658816.
2015.1041141.
[24] H. Kaluer, M. Brezak, I. Petrović, A visibility graph based method for path planning
in dynamic environments, 2011 Proceedings of the 34th International Convention
MIPRO, 2011, pp. 717–721 https://ieeexplore.ieee.org/abstract/document/
5967147.
[25] R. Marie, H.B. Said, J. Stéphant, O. Labbani-Igbida, Visual servoing on the gen-
eralized Voronoï diagram using an omnidirectional camera, J. Intell. Robot. Syst. 94
(3-4) (2019) 793–804, https://doi.org/10.1007/s10846-018-0855-z.
[26] I. Afyouni, C. Ray, C. Christophe, Spatial models for context-aware indoor navi-
gation systems: a survey, J. Spat. Inf. Scie. 1 (4) (2012) 85–123, https://doi.org/10.
5311/JOSIS.2012.4.73 https://hal.archives-ouvertes.fr/hal-00731055.
[27] M.-B. Hu, R. Jiang, Y.-H. Wu, W.-X. Wang, Q.-S. Wu, Urban traﬃc from the per-
spective of dual graph, Eur. Phys. J. B 63 (1) (2008) 127–133, https://doi.org/10.
1140/epjb/e2008-00219-5.
[28] D. Ding, Z. Pan, D. Cuiuri, H. Li, N. Larkin, Adaptive path planning for wire-feed
additive manufacturing using medial axis transformation, J. Clean. Prod. 133
(2016) 942–952, https://doi.org/10.1016/j.jclepro.2016.06.036.
[29] S. Tsuzuki, D. Yanagisawa, K. Nishinari, Auto-generation of centerline graphs from
geometrically complex roadmaps of real-world traﬃc systems using hierarchical
quadtrees for cellular automata simulations, Inform. Sci. 504 (2019) 161–177,
https://doi.org/10.1016/j.ins.2019.07.049.
[30] J. Choi, H. Kim, I. Kim, Open BIM-based quantity take-oﬀ system for schematic
estimation of building frame in early design stage, J. Comput. Des. Eng. 2 (1) (2015)
16–25, https://doi.org/10.1016/j.jcde.2014.11.002.
[31] Semi-automatic and speciﬁcation-compliant cost estimation for tendering of
building projects based on IFC data of design model, Autom. Constr. 30 (2013)
126–135, https://doi.org/10.1016/j.autcon.2012.11.020.
[32] M. Zhiliang, W. Zhenhua, S. Wu, L. Zhe, Application and extension of the IFC
standard in construction cost estimating for tendering in China, Autom. Constr. 20
(2) (2011) 196–204, https://doi.org/10.1016/j.autcon.2010.09.017 building
Information Modeling and Changing Construction Practices.
[33] S. Zhang, K. Sulankivi, M. Kiviniemi, I. Romo, C.M. Eastman, J. Teizer, BIM-based
fall hazard identiﬁcation and prevention in construction safety planning, Saf. Sci.
72 (2015) 31–45, https://doi.org/10.1016/j.ssci.2014.08.001.
[34] S. Zhang, J. Teizer, J.-K. Lee, C.M. Eastman, M. Venugopal, Building information
modeling (BIM) and safety: automatic safety checking of construction models and
schedules, Autom. Constr. 29 (2013) 183–195, https://doi.org/10.1016/j.autcon.
Fig. 21. Internal 3D optimal path for a drone.
A. Hamieh, et al.
Autom
ation in Construction 113 (2020) 103120
17
2012.05.006.
[35] F. Mirahadi, B. McCabe, A. Shahi, IFC-centric performance-based evaluation of
building evacuations using ﬁre dynamics simulation and agent-based modeling,
Autom. Constr. 101 (2019) 1–16, https://doi.org/10.1016/j.autcon.2019.01.007.
[36] W. Yan, C. Culp, R. Graf, Integrating BIM and gaming for real-time interactive ar-
chitectural visualization, Autom. Constr. 20 (4) (2011) 446–458, https://doi.org/
10.1016/j.autcon.2010.11.013.
[37] S. Taneja, B. Akinci, J.H. Garrett, L. Soibelman, Algorithms for automated gen-
eration of navigation models from building information models to support indoor
map-matching, Autom. Constr. 61 (2016) 24–41, https://doi.org/10.1016/j.autcon.
2015.09.010.
[38] C. Koch, M. Neges, M. Knig, M. Abramovici, Natural markers for augmented reality-
based indoor navigation and facility maintenance, Autom. Constr. 48 (2014) 18–30,
https://doi.org/10.1016/j.autcon.2014.08.009.
[39] P. Boguslawski, L. Mahdjoubi, V. Zverovich, F. Fadli, Automated construction of
variable density navigable networks in a 3D indoor environment for emergency
response, Automation in Construction 72 (2016) 115–128, https://doi.org/10.
1016/j.autcon.2016.08.041.
[40] V.E. Zverovich, L. Mahdjoubi, P. Boguslawski, F. Fadli, Analytic prioritization of
indoor routes for search and rescue operations in hazardous environments, Comput.
Aided Civ. Inf. Eng. 32 (2017) 727–747, https://doi.org/10.1111/mice.12260.
[41] J.-K. Lee, C.M. Eastman, J. Lee, M. Kannala, Y.-S. Jeong, Computing walking dis-
tances within buildings using the universal circulation network, Environ. Plann. B.
Plann. Des. 37 (4) (2010) 628–645, https://doi.org/10.1068/b35124.
[42] N. Li, B. Becerik-Gerber, B. Krishnamachari, L. Soibelman, A BIM centered indoor
localization algorithm to support building ﬁre emergency response operations,
Autom. Constr. 42 (2014) 78–89, https://doi.org/10.1016/j.autcon.2014.02.019.
[43] J. Shin, J.-K. Lee, Indoor walkability index: BIM-enabled approach to quantifying
building circulation, Autom. Constr. 106 (2019) 102845, https://doi.org/10.1016/
j.autcon.2019.102845 http://www.sciencedirect.com/science/article/pii/
S0926580519300627.
[44] T.-A. Teo, K.-H. Cho, BIM-oriented indoor network model for indoor and outdoor
combined route planning, Adv. Eng. Inform. 30 (3) (2016) 268–282, https://doi.
org/10.1016/j.aei.2016.04.007.
[45] S. Kang, E. Miranda, Planning and visualization for automated robotic crane erec-
tion processes in construction, Autom. Constr. 15 (4) (2006) 398–414, https://doi.
org/10.1016/j.autcon.2005.06.008 the ﬁrst conference on the Future of the AEC
Industry (BFC05).
[46] A. Soltani, H. Tawﬁk, J. Goulermas, T. Fernando, Path planning in construction
sites: performance evaluation of the Dijkstra, A*, and GA search algorithms, Adv.
Eng. Inform. 16 (4) (2002) 291–303, https://doi.org/10.1016/S1474-0346(03)
00018-1.
[47] Institut National de Recherche et de Sécurité, Le guide de la circulation en en-
treprise (2010), http://www.inrs.fr/media.html?refINRS=ED\%20975.
[48] A. Hamieh, Planiﬁcation automatique de chemin à l’intérieur de bâtiments basée
sur un modèle bim, Université de Valenciennes et du Hainaut-Cambrésis, 2018,
https://tel.archives-ouvertes.fr/tel-01962131.
[49] A. Hamieh, D. Deneux, C. TAHON, BiMov : vers une analyse dynamique de
navigabilité dans les bâtiments, Tanger, Morocco, 10th international conference
"Conception et Production Intégrées", 2015 https://hal.archives-ouvertes.fr/hal-
01260729.
[50] A. Hamieh, D. Deneux, C. Tahon, BiMov: BIM-Based Indoor Path Planning, in:
B. Eynard, V. Nigrelli, S.M. Oliveri, G. Peris-Fajarnes, S. Rizzuti (Eds.), Advances on
Mechanics, Design Engineering and Manufacturing, Lecture Notes in Mechanical
Engineering, Springer, Cham, 2017, , https://doi.org/10.1007/978-3-319-45781-9_
89 ISBN: 978-3-319-45780-2.
[51] O. Brock, J. Trinkle, F. Ramos, Hybrid Motion Planning Using Minkowski Sums,
online ISBN 9780262258623 MIT Press, 2009, p. 336 https://ieeexplore.ieee.org/
document/6284872.
[52] IfcOpenShell Accessed: 20-Jan-2020, http://ifcopenshell.org/.
[53] Open CASCADE Accessed: 20-Jan-2020, https://www.opencascade.com/.
A. Hamieh, et al.
Autom
ation in Construction 113 (2020) 103120
18





An-efficient-binary-storage-format-for-IFC-building-mod_2020_Automation-in-C.txt
Contents lists available at ScienceDirect
Automation in Construction
journal homepage: www.elsevier.com/locate/autcon
An efficient binary storage format for IFC building models using HDF5
hierarchical data format
Thomas Krijnena,⁎, Jakob Beetzb
a Technical University of Eindhoven (TU/e), Eindhoven, Netherlands
b Chair Computational Design, RWTH Aachen University, Aachen, Germany
A R T I C L E I N F O
Keywords:
BIM
IFC
EXPRESS
HDF5
Binary storage
File size
Performance
Level of detail
Federation
A B S T R A C T
The Industry Foundation Classes (IFC) are a prevalent data model in which Building Information Models can be
exchanged, typically with a file-based nature. Processing the full extent of these models can be time-consuming.
Considering the multi-disciplinary nature of the construction industry, stakeholders will typically only be in-
terested in a small subset, depending on the purpose of the exchange. Therefore, the retrieval of relevant subsets,
whether spatially, based on discipline, or others, is necessary to effectively consume such datasets in down-
stream applications.
Prevalent encoding forms of IFC models are text-based and do not facilitate random-access seeking within the
file and do not impose an ordering on the definition of elements within the file. Therefore, typically, the entire
file needs to be read in order to find the data of interest. Furthermore, text-based data is slower to parse in
comparison to binary data.
This paper assesses a binary serialization format originating from the family of EXPRESS standards. It is based
on an existing open, binary, hierarchical data format called HDF5 that allows random access to specific instances
and therefore efficient retrieval of relevant subsets. The block-level, transparent compression yields a reduction
of file sizes as compared to traditional serializations. Fully specified datatypes embedded in the exchange
guarantee interoperable use.
In this paper, several serialization profiles are introduced that cater to specific use cases by governing storage
settings. Advanced functionality from the HDF5 library is applied to offer novel paradigms for fine-grained
access rights, varying level of detail, revision management and aggregation of aspect models.
1. Introduction
The Industry Foundation Classes (IFC) are an open standard to ex-
press Building Information Models (BIM) and are aimed at providing a
comprehensive set of modeling constructs by which stakeholders from
many disciplines involved in the life cycle of a construction project can
express relevant information. A set of building models used for assess-
ments in this paper are depicted in Fig. 1. The multi-disciplinary nature
has resulted in an extensive schema (the IFC4 Add2 version of the
schema consists of 1174 ENTITY and type definitions) and there is a wide
variety of information published in IFC instance files. IFC files can also
be of considerable magnitude, possibly up to and over gigabytes of data.
The retrieval of subsets, based on the spatial location of elements in
a building or a particular discipline, is necessary to effectively consume
such datasets in downstream applications [1] and has been formalized
in a buildingSMART standard called Model View Definitions (MVD).1
On the one hand being successfully demonstrated in practice [2],
creating an MVD for industry usage follows a long development cycle of
forming a working group of industry experts that formalize the ex-
change requirements after which the MVD can be implemented in
software. Extracting relevant information post-hoc from a more multi-
disciplinary model subset can be seen as more flexible.
In the past, a number of query languages have been developed to
formalize systems by which information can be extracted from IFC files.
https://doi.org/10.1016/j.autcon.2020.103134
Received 17 September 2019; Received in revised form 13 February 2020; Accepted 14 February 2020
⁎ Corresponding author.
E-mail addresses: t.f.krijnen@tue.nl (T. Krijnen), j.beetz@caad.arch.rwth-aachen.de (J. Beetz).
1 https://technical.buildingsmart.org/standards/mvd/ (Retrieved Feb 2020)
Autom
ation in Construction 113 (2020) 103134
Available online 09 M
arch 2020
0926-5805/ ©
 2020 The Authors. Published by Elsevier B.V. This is an open access article under the CC BY license 
(http://creativecom
m
ons.org/licenses/BY/4.0/).
T
This can be done on the level of attributes [3] or topological relation-
ships [4]. For the curation of metadata pertaining to IFC models and the
buildings they describe, automated systems are developed that extract
this information [5]. These use cases have in common that they are
aimed at extracting a subset of information in the model and present
this to the user.
In the construction industry many disciplines interoperate and re-
lease documents to one another that have legal status, often accom-
plished by means of release packages or containers with interrelated,
heterogeneous information (e.g. three-dimensional models, two-di-
mensional details, textual specifications, contractual agreements). The
current textual IFC serialization formats have limited capabilities to
establish links to and from this heterogeneous content. At the same
time, buildings last a long life, but rapidly evolving standards and
complexity of interpreting digital BIM models poses risks for inter-
operable long-time access to knowledge about our built environment.
IFC engineering models are analyzed as big data or in geo-spatial
contexts [e.g. 6,7] or using novel concepts such as machine learning [8]
to uncover novel insights. EXPRESS is mostly an ecosystem of tradi-
tional programming languages with SDAI (Standard Data Access In-
terface) bindings to for example C/C++ and Java. None of the current
serialization formats enable this kind of big data analysis by connecting
to widely used data analysis frameworks (e.g. MATLAB and Numpy/
Python) and enabling efficient, streaming access to extensive datasets.
To date, the most common serialization format of IFC instance
models is the ISO 10303 part 21 (Step Physical File Format, SPF, p21).
It has been designed to balance interoperability and compactness, not
to efficiently handle reading subsets of large files. There is no order
imposed on definitions in the file and due to the text-based and versatile
nature it's not possible to skip over parts when parsing. Therefore, the
use cases sketched above of efficiently computing subgraphs, extracting
relevant information and establishing links are not feasible as SPF in-
stance models grow in size. The primary reason for this is the lack of
structuring in the way entity instances are laid out in an SPF serial-
ization. An SPF file represents one continuous stream of instances,
without the possibility to arbitrarily seek random locations in the file
Fig. 1. Graphical depiction of the models used for the various assessments in this paper.
T. Krijnen and J. Beetz
Autom
ation in Construction 113 (2020) 103134
2
prior to parsing it completely. Furthermore, parsing inefficiency is in-
creased by the plain text representation of floating point numerals and
ASCII encodings for Unicode and ANSI code pages, which have to be
parsed and translated into their machine equivalent. In SPF, storage
space is not efficiently used due to the full type names being used re-
dundantly for every instantiation of data. At the same time, extensions
to the IFC schema, such as IfcBridge, IfcAlignment or point cloud data
structures extensions are being proposed [9] and integrations with
heterogeneous forms of data [10] are being developed that further in-
crease the requirements for storage and retrieval efficiency.
The EXPRESS modeling language, in which the IFC schema is spe-
cified, is versatile and flexible. It features advanced concepts such as a
Turing-complete formulation of schema-level constraints, multiple in-
heritance, combinatorial subtypes and algebraic data types (SELECT).
These concepts can be succinctly expressed in a text-based p21 file, as it
poses no limitations on the length of records or valuation of attributes.
Consequently, the need arises for external semantic validation tools for
seemingly trivial validation tasks, such as asserting that instance attri-
butes are of the correct type [11].
In the section next section the state of the art is described, including
the existing EXPRESS to HDF5 mapping. In Section 3 the novel research
in this paper is outlined. This includes a more formalized mapping
procedure and the definition of three serialization profiles. Results are
described in Section 3.2 including file sizes and access times to specific
data for a variety of publicly available IFC models. Subsequently, in
Section 4 several additional use cases are discussed specific to the
construction industry. A conclusion is provided in Section 5. The use
cases specifically investigated are:
• storage of large data volumes,
• federation of aspect models,
• definition of multiple levels of detail,
• containerized storage of heterogeneous data,
• long-term digital preservation and archival of building models
2. State of the art
The most prevalent serialization format of IFC has been designed to
maximize interoperability and human readability. It originates from the
family of ISO 10303 standards. It is often referred to as IFC-SPF or SPFF
(for Step Physical File [Format]) or as a p21 file for it's part number in
the standard. As an alternative, part 28 is chosen in the IFC standard to
represent exchange models using XML.
With an increasingly wider use of IFC building models, existing
methods do not satisfy many of the more advanced use cases for digital
building models, such as machine-to-machine communication, efficient
querying and managing large datasets. As a consequence, alternative
storage and serialization mechanisms are proposed:
• ifcJSON [using JavaScript Object Notation, 12] for easy consump-
tion by (predominantly) web-based applications and
• ifcOWL [using Ontology Web Language, 13] to enable formal rea-
soning, reusing standardized query languages, establishing links as a
native concept, extensibility and integration with other ontologies
(the so called Linked Open Data cloud) by means of embracing se-
mantic web technologies.
Neither of these novel serialization formats specifically enable large
datasets, up to and over gigabytes of IFC instance data. Earlier work
from the authors has shown that the proposed HDF5-based serialization
mechanism is capable of efficiently retrieving subsets of IFC models
enriched with hundreds of gigabytes of point cloud data [9].
All current serialization formats (SPF, XML, JSON, RDF) are text-
based in their most prevalent notations. This adds an overhead in ma-
chine to text serialization of datatypes and relatively complicated par-
sing logic.
Listing 1. Definition of an SELECT type in EXPRESS using a SELECT valued
attribute. A possible instantiation in IFC-SPF is provided as well.
T. Krijnen and J. Beetz
Autom
ation in Construction 113 (2020) 103134
3
Listing 2. Definition of an SELECT type using HDF5 datatypes according
to ISO 10303-26. The same instantiation is provided in a textual
representation of the binary data, both as reported by the ‘HDF5
dump’ utility.
2.1. HDF5
The Hierarchical Data Format (HDF) [14] is an open standard for
efficiently handling large datasets. HDF is used for more than 20 years
in different engineering and scientific communities to cope with large
amounts of data including e.g. physics, astronomy and medical data-
sets. It is an open standard that allows efficient reading and writing and
has mature portable implementations in many languages (official sup-
port for C, C++, Fortran, Java and Python, unofficial wrappers for
nearly every other language).
HDF5 provides flexible mechanisms for data modeling in a trans-
parent, self-documenting way that makes it an accepted candidate for
long-term preservation [15,16] and interoperability [17] use cases.
Groups. Technically, an HDF5 file can be considered akin to how a
file system can be organized. An HDF5 file spans a collection of objects,
which are retrieved by means of their membership to groups. Group
names can be chained to construct paths to access datasets, similarly to
file system folders. This organization mechanism constitutes the hier-
archical nature of HDF5 and allows to efficiently subdivide model
contents.
Datasets. In HDF5, Datasets hold entries of numeric, textual or
compound data fields and carry a reference to a datatype, which de-
scribes the structure of the data, and to a dataspace, which describes the
dimensions of the dataset.
Filters. Filters can be applied to datasets that govern e.g. com-
pression or the calculation of checksums when reading from or writing
to disk. Processing these filters upon storage and retrieval is governed
by the HDF5 library, hence datasets can be transparently compressed
and decompressed agnostic to the application consuming the data.
Datatypes. HDF5 offers a variety of native datatypes in a familiar
idiom, such as integers and floating-point numerals. Enumerations are
offered to describe a value adhering to a set of predefined labels. Arrays
(of fixed size) and variable length fields are used to express sequences.
Compounds span an ordered collection of named members, which are
themselves fully typed attributes.
Fixed length. Contrary to many modeling languages such as
EXPRESS and JSON, HDF5 does not have a native mechanism for
missing fields. In JSON, values for attributes can be omitted by omitting
the key-value pair from the object. In SPF null values are indicated by $.
The rectangular structure of HDF5 datasets requires that all dataset
fields have a fixed and predefined length. This fixed length requirement
also has implications for variable length aggregates as they are stored in
a separate data structure, referred to as a heap, with 32 bytes auxiliary
space per variable length attribute.2
2.1.1. EXPRESS HDF5 mapping
With the existing ISO 10303 part 26, a standard exists that specifies
a mapping from EXPRESS schemas and instance model populations into
HDF5.
Apart from the storage space and parsing advantages stemming
from binary storage and partial decompression, HDF also adds a
number of additional advantages over part 21 SPF workflows, namely:
(a) The underlying data schema and meta-data is transported along
with the instance files. This guarantees a correct valuation of attributes
2 This is documented at https://www.hdfgroup.org/HDF5/doc/TechNotes/
VLTypes.html (Retrieved Feb 2018)
T. Krijnen and J. Beetz
Autom
ation in Construction 113 (2020) 103134
4
in terms of their datatype and assures long-term readability. (b) It al-
lows for storing additional attributes that are not part of the schema
specification. For example pre-computed geometrical triangulations for
efficient visualization or an instantiation of inverse attributes for effi-
cient graph traversal. (c) Most notably, the hierarchical nature of HDF
allows fast random access and slices through large datasets and facil-
itate lazy loading approaches.
The complete mapping can be found in the ISO 10303-26 standard
and would be too detailed to fully specify within the context of this
paper. An example of a textual description of an IFC datatype in HDF5 is
provided in Listing 1. A depiction of a generic HDF5 viewer showing an
IFC instance model using the self-descriptive datatypes is given in Fig. 2.
Groups. The EXPRESS schema is captured in the instantiation as
part of a group with committed datatypes. Model populations are also
encapsulated in a group. Hence, an HDF5-serialized model can contain
several instance models as well as several schemas. A graphical over-
view of an example group structure is found in Fig. 3.
Datasets. Instances of the same type are stored together in HDF5
datasets. This facilitates simple inspection tasks on the model, see the
evaluation of this in Sections 3.2.4.1 and 3.2.4.2. And assures that data
types not of interest to the reader do not need to be parsed.
Datatypes. The HDF5 Compound datatype is what constitutes the
self-documenting nature of the EXPRESS HDF5 standard and forms the
cardinal building block of the mapping. These are used to represent
various EXPRESS constructs, namely: (a) ENTITY types. Contrary to SPF-
serialized models, the attribute names are embedded in the file and
easily accessible when viewing HDF5 data with general purpose tools.
The self-documenting attribute names do not incur a measurable sto-
rage space penalty since they are stored in the datatype definition,
which is reused among all instances of the same type, this contrary to
XML and JSON serialization where attribute names are repeated for
every instance. (b) Instance references consists of a pair of unsigned
integers, referring to a dataset and the row in the dataset that describes
the instance, stored as a compound (c) SELECT types are defined as HDF5
compounds with space allocated for all possible concrete types and
additional fields that indicate the type for an individual instance.
Fixed length. The ability to efficiently retrieve model subsets stems
from the fact that every definition has a fixed length and therefore fixed
offset in the dataset, a multiple of this width. It precisely stipulates the
exact location of every instance and attribute in the file. Conversely, in
the currently prevalent text-based encodings there isn't an order im-
posed on instance definitions in the file so the entire file needs to be
scanned to find all referenced definitions.
This fixed length requirement has implications for variable length
strings and aggregates, such as EXPRESS LISTS, used extensively in
geometry definitions [18], that are stored in the HDF5 heap structure.
As opposed to the EXPRESS modeling language, numeric datatypes
have a predefined and fixed width and precision (Fig. 2).
3. Contribution
This paper describes and evaluates a binary serialization format for
IFC building models. The serialization format is based on HDF5 and
follows ISO 10303-26 where this is feasible. The contribution and no-
velty of this paper is seen in the following items:
1. Formalization of the mapping procedure from EXPRESS to HDF5
data types in Section 3.1.1.1 based on a documented meta-model of
the EXPRESS language. While the basis of this mapping is standar-
dized in ISO 10303-26, the authors have identified several aspects
that are imprecise, incomplete or inconsistent in the standard and
are further specified in this paper.
2. Introduction and evaluation of three serialization profiles aimed at
(a) backwards compatibility (b) storage efficiency and (c) federated
storage of aspect models as described in Section 3.1.
3. In-depth evaluation of the HDF5 serialization in terms of storage
space and data retrieval efficiency in isolated and reproducible
cases. This includes detailed characteristics of the serialization such
as inclusion of inverse attribute values and partial compression.
Previous works from the authors included only a partial evaluation
with respect to point cloud compression [9] and a comparison with
Semantic Web SPARQL query engines [19].
4. Elaborate experiments with HDF5 features such as region references
in Section 4.2 and mounting in Section 4.3 to cater to specific use
cases in the construction industry.
5. An open source implementation of the mapping in C++3 and a
corpus of converted models for reference.4
6. Taking all into account, a reflection and conclusion is provided on
adoption of HDF5 as a supplementary standard for IFC serialization
in Section 5.
Fig. 2. An IFC-HDF model opened in the freely available generic “HDFView 3.0” application showing some of the wall instances in the duplex (Fig. 1a) model.
3 https://doi.org/10.5281/zenodo.1173008
4 https://doi.org/10.5281/zenodo.1172519
T. Krijnen and J. Beetz
Autom
ation in Construction 113 (2020) 103134
5
Fig. 3. General overview of the layout of a EXPRESS instance model within an HDF5 file. With ∣G∣ for group, ∣D∣ dataset, ∣T∣ datatype and ∣A∣ attribute. Arrows with
solid lines represent native HDF5 relationships of which the validity is enforced by the standard library. Dashed line arrows represent symbolic relationships that are
necessary for the meaningful interpretation of the IFC instance model, but are not understood by the HDF5 library. With (1) group containment, (2) associated
datatype, (3) associated attribute, (4) index in the list of dataset names necessary to resolve instance reference and (5) bitmask reference to indicate the presence of
values for optional attributes.
Algorithm 1. Base definitions and the creation of a defined type.
T. Krijnen and J. Beetz
Autom
ation in Construction 113 (2020) 103134
6
Fig. 4. EXPRESS-G depiction of a subset of the metamodel (SDAI_DICTIONARY_SCHEMA) of the EXPRESS modeling language, defined in ISO 10303 22, with IFC specific
simplifications. Types in gray italic print are not developed in this illustration in order to conserve space.
Fig. 5. Inverse attribute definition that relates a property-set to an object. The relationship entity defines the two attributes that pairs the object with the property-set.
In order to enumerate all properties for a building element, either all relationship nodes need to be parsed, or an instantiation of the inverse attributes (in bold print in
this figure) need to be provided. In addition to providing means to navigate in both direction, inverse attributes can also constrain cardinalities, in this case limiting
that a property set definition can be referred to by at most one relationship node.
T. Krijnen and J. Beetz
Autom
ation in Construction 113 (2020) 103134
7
Algorithm 2. Creation of an enumeration type.
Algorithm 3. Creation of an SELECT definition.
Fig. 6. IFCCARTESIANPOINT serialization for standard and padded profile.
Fig. 7. The over a hundred possible concrete valuations for IFC2X3.IfcValue and resulting HDF5 datatype allocations. Percentages of use are derived from the from
the conference center model (1 g). Numbers and strings account for the majority of values, aggregates and logicals have not been instantiated.
T. Krijnen and J. Beetz
Autom
ation in Construction 113 (2020) 103134
8
Fig. 8. Comparison of file sizes for various serialization options. Note the logarithmic scale on both axes. Where not mentioned otherwise a chunk size of 1024
instances is used.
T. Krijnen and J. Beetz
Autom
ation in Construction 113 (2020) 103134
9
Fig. 9. Processing times in seconds and bytes read for IFC-SPF and IFC-HDF files according to four access patterns.
Fig. 10. Processing times and bytes read for IFC-SPF and IFC-HDF files for various chunk sizes.
T. Krijnen and J. Beetz
Autom
ation in Construction 113 (2020) 103134
10
Fig. 11. Example of an IFC model with point clouds serialized as IFC-HDF. Source: Krijnen and Beetz [9].
Fig. 12. Overview of the aggregation of three discipline models by means of HDF5 groups using Object References and Groups. A single shared umbrella structure is
identified using matching definitions for Project > Site > Building > Storeys, Units and more. The model is generated automatically from three separate IFC-SPF files.
Fig. 13. Three aspect models (13a architectural, 13b structural and 13c mechanical, electrical plumbing) and 13d resulting graphic obtained from the combined
HDF5 serialization in Fig. 12. Model courtesy of www.nibs.org/?page=bsa_commonbimfiles.
T. Krijnen and J. Beetz
Autom
ation in Construction 113 (2020) 103134
11
Algorithm 4. Creation of a SELECT type.
T. Krijnen and J. Beetz
Autom
ation in Construction 113 (2020) 103134
12
Listing 3. Definition of part of the IFC schema by means of the
simplified
SDAI_DICTIONARY_SCHEMA
to
exemplify
data
that
the
Algorithms operate on. Note that implementations do not need to
follow this representation of the schema, it serves as only as a means to
formalize the operations in this paper.
ISO 10303-26 consists of descriptive text and simplistic examples in
the C programming language. This has not lead to a fully comprehen-
sive and unambiguous mapping in all cases. This paper provides
pseudo-code for the mapping procedures based on a modified version of
the EXPRESS meta-schema.
Fig. 14. Overview a potential segmentation of types for various levels of detail. The origin IFC model is decomposed into four HDF5 files, the main file with products,
placements and units, properties that contain the key-value property sets, type and material information, the original geometry definitions and alternative geometry
definitions in the form of per-element generated bounding-boxes. Of the latter two one set of geometry definitions is to be chosen by means of HDF5 mounting
functionality.
T. Krijnen and J. Beetz
Autom
ation in Construction 113 (2020) 103134
13
Listing 4. Example of an ambiguous SELECT type from the IFC schema
and resulting HDF5 datatype. Specularity is defined as either a
roughness or an exponent, with both the same underlying REAL
datatype.
Listing 5. The specular highlight
SELECT in Listing 4 as an HDF5
datatype. Note “select_bitmap” which is present to signal this is a
SELECT definition, even if there is only a single concrete valuation and the
added “type_path” to differentiate between the two valuation options.
3.1. Serialization profiles
ISO 10303-26 outlines a single generic mapping from EXPRESS to
HDF5. During the evaluation of the results it became clear that, for
applications in the construction industry, the HDF5 serialization would
benefit from the introduction of several profiles that alter specific
mapping rules. Note that support for these additional profiles is not a
significant implementation effort. The vast majority of logic applies to
all profiles and in particular reading models is largely unaffected by the
profiles. These serialization profiles are named standard (3.1.1) padded
(3.1.2) and referenced (3.1.3).
The padded and referenced profiles modify distinct procedures of
the mapping and could therefore be combined. However, the aims of
the padded profile to minimize use of heap structures and create con-
tiguous data sections would be counteracted by the introduction of
region
references
that
make
intensive
use
of
the
heap.
All
re-
commendations are implemented in software and evaluated. In addi-
tion, some advanced functionality is assessed in order to come to so-
lutions specific to the construction industry, such as the federation of
aspect models (see Section 4.2).
3.1.1. Standard
The IFC-HDF standard profile follows the principles defined in ISO
10303-26. The standard profile is the evident choice when there are no
stringent requirements on minimizing storage space or on support for
advanced use cases.
The pre-existing mapping states “Although there is no standard re-
presentation for derived or inverse attributes specified in this part of ISO
10303, they are not precluded from appearing in the HDF5 file”. In the case
of IFC it has been found to be desirable to include inverse attribute
valuations. One of the main advantages of the HDF5 serialization is the
ability to efficiently operate on small subsets of the total amount of
data, for this purpose, the inclusion of inverse attributes is advisable.
IFC frequents objectified relationships to link concepts. For example,
building elements and property sets are linked by means of a
IFCRELDEFINESBYPROPERTIES entity which binds the element to the property
set. Without inverse attributes, all instances of the relationship entity
need to be read and checked in order to find the relevant properties for
a certain building element. With inverse attributes, the relevant re-
lationship nodes are encoded as part of the building element instances
in the ISDEFINEDBY attribute value (Fig. 5).
Some of the provisions in the general STEP HDF5 mapping are not
applicable to the IFC schema, as the latter is restrictive in its use of
features from the EXPRESS modeling language. In particular, the IFC
class hierarchy is limited to single inheritance and especially forbids the
use the default AndOr supertype constraint in EXPRESS, a type of in-
heritance where multiple subtypes can be combined to form concrete
instances and therefore form a combinatorial amount of possible con-
crete subtypes. Furthermore, extensible enumerations in EXPRESS and
ARRAYS with optional elements are not used.
3.1.1.1. Formal specification. The mapping in ISO 10303-26 is defined
in written language, it is not free of ambiguities and several aspects are
underdeveloped. In order to establish an unambiguous reference for the
construction industry, a more formal mapping in pseudo-code is
provided as part of this paper. It is based on the EXPRESS meta-
model (Fig. 4), i.e. a schema in which a conventional schema can be
described. An example subset of the IFC schema defined according to
this meta-model is given in Listing 3. The meta model is adapted to the
set of modeling constructs used in IFC.
Some ambiguities and deviations from the original standard text
have been clarified in the formal specification listed below.
1. Ambiguous SELECT definitions.
Paragraph 6.9.3.2 of the original standard states “The second
member shall benamed [sic] ‘type_path’ and it is an H5T_VLEN of
H5T_STRING that represents a possible type path. In some cases such a
type path has to be populated since the value of the SELECT type would
otherwise be ambiguous [emphasis added].”. However, the exact qua-
lifications when a SELECT definition qualifies as ambiguous is not pro-
vided, neither is the valuation procedure of the type path. A precise
condition of when exactly a SELECT definition is considered ambiguous in
this paper is given in Algorithm 3. An example SELECT definition where
this applies is given in Listing 4 with the resulting HDF5 datatype in
Listing 5.
2. Aggregate names within SELECT definitions.
SELECT definitions results in compounds with named members,
6.9.3.4 states that aggregates within SELECT compounds are to be named
in accordance with “chapter 6.8.5”, but 6.8.5 details “Late binding of
aggregate storage” and gives no naming mechanism. In this paper, a
naming mechanism is therefore provided in Algorithm 4.
Fig. 15. Rendering of the bounding boxes of the conference center model (b),
providing a decent geometrical overview at 93 KB of compressed HDF5 data,
with the complete IFC-SPF model totaling 68,678 KB. Compare to Fig. 1g.
T. Krijnen and J. Beetz
Autom
ation in Construction 113 (2020) 103134
14
3. Types of SPF header values.
6.3.3 states “This part of ISO 10303 also defines several optional
HDF5 Attributes for the purpose of annotating HDF5 Groups containing
EXPRESS-driven populations. They have the following names and de-
scriptions and are of type HDF5 STRING [emphasis added]”. In order to
comply
with
the
type
definitions
in
SPF
(ISO
10303
21),
iso_10,303_26_description, iso_10,303_26_author and iso_10,303_26_author
are changed to H5T_VLEN {H5T_STRING} to match the file_de-
scription.description, file_name.author and file_name.organization which
are of type “LIST [1:?] OF STRING(256)”.
4. Entity attribute names
6.6 states “The name of each member of the HDF5 Compound Type
representing an EXPRESS attribute shall be the name of the EXPRESS
explicit attribute in upper case.”, however this is not followed in the
remainder of the section and in the supplied examples. For legibility,
this paper copies the exact casing from the original IFC EXPRESS
schema.
3.1.2. Padded
As has also been observed in technical reports by the HDF group
[i.e. 20], the mechanism of storing attribute values within a separate
heap structure creates overhead in storage and performance. The
overhead in storage is twofold as auxiliary space is required for the
bookkeeping of heap entries and, secondly, compression filters cannot
be applied to the heap contents. The performance implications stem
from the fragmented reading and writing operations of maintaining and
accessing the heap entries linked by intstances in the datasets. The
padded profile is aimed at alleviating these concerns.
Variable length data in IFC comes in various forms: (a) the majority
of strings are variable length, only IFCROOT.GLOBALID has a fixed char-
acter count of 22 (b) many of the relationships have one-to-many car-
dinalities, for example the containment and decomposition relation-
ships (c) geometrical types use variable length aggregates for loops and
paths, but also a Cartesian point is defined as a variable length ag-
gregate in order to re-use the same definition for 2D and 3D points [18]
(d) storage for inverse attributes often results in variable length ag-
gregates. Table 1 lists variable length (forward) attributes ordered by
their prevalence in the conference center (1 g) model.
The padded serialization proposed in this paper effectively converts
all variable-length aggregates in a given serialization to a fixed-length
equivalent governed by the maximum length in the population to be
serialized. Note that therefore, HDF5 datatypes for the same EXPRESS
ENTITY will no longer be identical given different models. For some at-
tributes, allocating these fixed-size arrays results in a considerable in-
crease in uncompressed dataset size as the average and maximum
lengths are far apart. This is the case for example in POLYGON attribute of
IFCPOLYLOOP, the majority of faces are triangles, but a small number of
detailed polyhedra extends the range considerably. On the other hand
for IFCCARTESIANPOINT, the average number of elements is close to the
maximum as most of the points are three-dimensional. Note that when
applying compression filters the storage overhead of the zero-initialized
padded values is essentially zero, as standard run-length encoding ef-
fectively eliminates these repeating values. When reading and proces-
sing information, the data is uncompressed in memory and therefore
results in a higher memory load, which has implications on the chunk
size (see Section 3.2.3.1) to choose. Fig. 6 visually depicts the storage
lay-out for IFCCARTESIANPOINT in the case of standard and padded serial-
ization.
A similar complication originating from fixed-length records are the
SELECT types in EXPRESS, also sometimes called union data types. For
example in the case of the trimmed curve in Listing 1 a SELECT type is
used to state that a curve is trimmed either by a parameter value (a
monotonically increasing measure over the curve) or by a Cartesian
point. As shown in Listing 2, this results in a HDF5 Compound datatype
with space allocated for both options and an integer that specifies
which of these is used for an individual instance. In the padded profile,
datatypes depend on the populated instances to determine their re-
quired width. Therefore in the padded profile, applications are allowed
(not required) to eliminate unused items from the select compound.
The IFCTRIMMINGSELECT in this example is modest example with two
leave nodes, but there are SELECT definitions in the schema that span a
considerably larger amount of options. An example is IFCVALUE, used for
property definitions and therefore very prevalent. In essence it selects
almost all defined datatypes in the IFC schema. Fig. 7 graphically shows
the SELECT definition for IFCVALUE and resulting HDF5 allocations for leaf
nodes of the SELECT. Most of the possible types are never instantiated, but
some result in large allocations, especially IFCCOMPLEXNUMBER (array
[1:2] of real) and IFCCOMPOUNDPLANEANGLEMEASURE (list[3:4] of in-
teger).
3.1.3. Referenced
Both serialization profiles mentioned above encode instance refer-
ences as a pair of integers in a HDF5 Compound, specifying (a) the
Table 1
Variable length attributes ordered by their prevalence in the conference center model (1 g). Minimum and maximum lengths for the aggregates and strings are shown
along with the average lengths. Padded serialization effectively sets all these aggregates to their max length derived from the model.
Entity
Attribute
Type
n
Min
Max
Avg
IfcPolyLoop
Polygon
list[3:?] of IfcCartesianPoint
295,784
3
90
3.29294
IfcFace
Bounds
set[1:?] of IfcFaceBound
295,744
1
3
1.00014
IfcCartesianPoint
Coordinates
list[1:3] of IfcLengthMeasure
230,426
2
3
2.91271
IfcRoot
Name
IfcLabel (string)
29,253
0
119
27.2274
IfcRoot
Description
IfcText (string)
12,928
0
18
3.25866
IfcRepresentation
RepresentationIdentifier
IfcLabel (string)
8431
4
9
4.03843
IfcRepresentation
RepresentationType
IfcLabel (string)
8431
3
20
13.7369
IfcRepresentation
Items
set[1:?] of IfcRepresentationItem
8431
1
315
1.35524
IfcRelDefines
RelatedObjects
set[1:?] of IfcObject
8171
1
318
1.56554
IfcObject
ObjectType
IfcLabel (string)
7037
0
65
24.3396
IfcProductRepresentation
Representations
list[1:?] of IfcRepresentation
6889
1
3
1.11409
IfcElement
Tag
IfcIdentifier (string)
6582
6
7
6.20541
IfcPhysicalQuantity
Name
IfcLabel (string)
6128
4
18
9.05385
IfcStyledItem
Styles
set[1:?] of IfcPres...
6083
1
1
1
IfcPropertySet
HasProperties
set[1:?] of IfcProperty
5937
1
10
2.47768
IfcRelAssociates
RelatedObjects
set[1:?] of IfcRoot
5191
1
1267
1.82759
IfcPolyline
Points
list[2:?] of IfcCartesianPoint
4923
2
95
3.47187
T. Krijnen and J. Beetz
Autom
ation in Construction 113 (2020) 103134
15
dataset (corresponding to an entity type) and (b) a row within that
dataset (corresponding to an entity instance). The first integer is an
index in a lexicographically sorted set of dataset names that is supplied
as part of the instantiation. This encoding is concise and efficient, but
comes with the limitations that there can only be one single dataset
within the population for each specific type. In addition, the serial-
ization
dictates
the
exact
location
of
each
dataset,
namely.
/ < entity > _OBJECTS/ < entity > _INSTANCES.
These limitations in particular affect the more advanced use cases,
such as the usage of additional HDF5 groups for the federation of aspect
models (see Section 4.2) and mounting various files to choose among
levels of detail (Section 4.3). HDF5 mount point needs to be an empty
HDF5 group. Therefore, the strict dataset location cannot be maintained
in case of mounting. To alleviate these constrains, the referenced profile
uses HDF5 Region references instead, offering a fully native solution to
point to other instances, at the expense of reduced efficiency: additional
operations are needed to resolve the references and an increase in file
size – a region reference counts as twelve bytes in the dataset, excluding
other provisions in the heap, eight for the reference to the dataset object
four to specify the dataspace reference, i.e. the elements selected within
the dataset. The dataspace itself is stored in a heap with varying size
depending on whether individual points are selected or a contiguous
range (hyperslab) is selected. These differences are quantified in the
following sections.
3.2. Results
This section describes several outcomes of the IFC-HDF serial-
ization. All generated HDF5 files are provided in an online repository
for reference.5 File sizes are discussed in Section 3.2.3, but are not the
main decisive factor in evaluating the HDF5 serialization. More pro-
found are the discussion of access times and read operations based on
four access patterns of increasing complexity that mimic real world
usage in Section 3.2.4.
3.2.1. Models
The majority of results are obtained for a set of nine IFC building
models, from varying tools and schemas and with an increasing amount
of instances and products. For discussions where use of a single model is
more illustrative than aggregates from a set of models, typically the
conference center model (1 g) is used as it contains elements pertaining
to various disciplines and is therefore perhaps the most general. The
total set of building models is listed in Table 2 and Fig. 1.
Rvt
Autodesk
Revit
SDS
Nemetchek
SDS/2
ArC
Graphisoft
ArchiCAD Vws Nemetchek VectorWorks.
3.2.2. Implementation
An implementation of the EXPRESS HDF5 mapping is created in a
C++ prototype, built on top of IfcOpenShell,6 an open source toolkit
for working with IFC files. The full source code of the implementation is
provided in an open source repository.7
The execution times presented in this section are the average of 10
repeated runs, discarding the 5 slowest. The ‘number of bytes read’ is
reported by running the process in STRACE and capturing the magnitude
all read operations. The operations for opening the executable and
program libraries are excluded. The experiment is ran on an Amazon
EC2 t2.xlarge node with 4 virtual CPU cores and 16 gigabytes of RAM.
Due to the visualized infrastructure, performance fluctuations can be
observed based on the usage of other tenants, but an easily accessible
configuration enhances the ease with which the results can be re-
produced. For this reason the five slowest runs are discarded prior to
averaging.
3.2.3. File size
File sizes for the various serialization options are given in Fig. 8.
Fig. 8a shows the general comparison of the three HDF5 serialization
profiles compared to the SPF serialization, including gzip compression,
a generic and very widely used implementation of the DEFLATE algo-
rithm, a compression method and a combination of LZ77 [21] and
Huffman coding [22]. Note that the nature in which the compression is
applied to the files is fundamentally different from the HDF5 and the
SPF encoding. In the case of HDF5, the compression is applied to in-
dividual chunks of data, leaving the overarching metadata unaffected
and allowing to still seek accurately within the file to specific bits of
information. In the case of SPF this overarching structure is absent, no
ordering is applied to the data and decompression has to occur se-
quentially from the beginning of the file.
One can observe that for small models spf results in smaller files
than hdf-standard, for some of the bigger models hdf-standard is
Table 2
Statistics of the IFC building models used to assess the IFC-HDF serialization.
Model
Tool
Schema
File size (KB)
n products
n instances
(a)
duplex apartmenta
Duplex_A_20110907_optimized.ifc
Rvt
IFC2X3
1617
295
27,529
(b)
players theater structureb PlayersTheater_param.ifc
SDS
IFC2X3
4164
6823
62,212
(c)
hospital parking garageb
Autodesk_Hospital_Parking Garage_2015 - IFC4.ifc
Rvt
IFC4
6298
1510
108,753
(d)
medical clinica
Clinic_A_20110906_optimized.ifc
Rvt
IFC2X3
12,898
3298
209,148
(e)
schependomlaan apartmentc
IFC Schependomlaan.ifc
ArC
IFC2X3
48,131
3822
714,485
(f)
tromso university colleged
SGD_HiTOS_Arch.ifc
ArC
IFC2X3
51,618
2706
938,124
(g)
conference centerb OTC-Conference Center
Rvt
IFC2X3
68,678
10,309
1,268,139
(h)
holter towerb
Holter Tower.ifc
ArC
IFC4
173,306
61,474
2,807,815
(i)
riverside office buildinge NVW_DCR-LOD300_Arch.ifc
Vws
IFC2X3
281,376
12,055
5,276,285
a www.nibs.org/?page=bsa_commonbimfiles
b http://openifcmodel.cs.auckland.ac.nz
c https://github.com/openBIMstandards/DataSetSchependomlaan/tree/master/Design model IFC.
d http://data.duraark.eu
e http://www.vectorworks.net/bim/projects/139
5 https://doi.org/10.5281/zenodo.1172519
6 http://ifcopenshell.org
7 https://doi.org/10.5281/zenodo.1173008
T. Krijnen and J. Beetz
Autom
ation in Construction 113 (2020) 103134
16
more efficient. This can be explained in terms of the fixed size overhead
of dataset allocations and file size reserved for metadata and schema
information, which is a constant overhead and therefore relatively more
pronounced on smaller models. Inefficiencies exist in spf as well, in
particular the inclusion of repeated entity names for every instance
(every definition starting with e.g. IFCCARTESIANPOINT(). On the
other hand, in hdf-standard there is an overhead for variable length
data and SELECT definitions.
When factoring in compression (spf (gzip8) and hdf-standard
(gzip)) one can see that compression is more effective on the text-
based spf. This has been described Section 3.1.2 and is due to the fact
that in hdf-standard compression does not operate on the variable-
length data, which includes aggregates and strings. On the other hand,
compression effectively eliminates the redundant entity name defini-
tions in the spf serialization. For the padded profile (hdf-padded
(gzip)) the compression is much more effective, so effective in fact for
models (f)-(h) what is initially the largest serialization (hdf-padded)
by means of compression, the smallest result is obtained (hdf-padded
(gzip)). Uncompressed hdf-padded allocates more space as variable-
length data is padded with enough bytes to allocate space for the largest
occurrence in the model. Compression effectively eliminates this
overhead and, by being able to compress variable-length aggregates
and strings, a more concise serialization is obtained than previously
possible. Due to the logarithmic scale the difference is visually not
pronounced, for the holter tower model (h) the resulting filesizes for spf
(gzip) and hdf-padded (gzip) are 20108 and 32924 respectively, a
reduction of 39%. In addition to being more concise, note that the
fundamentally different nature of compression in the HDF5 serial-
ization allowing to still seek to arbitrary information without a com-
plete decompression.
Fig. 8b shows the relative increase in filesize when inverse attributes
are included in the serialization. Also in this case, since most inverse
attributes are variable length set types, the overhead is slightly larger
for the non-padded serializations, especially for hdf-referenced as
instance references take up more space and inverse attributes are in-
stance references by definition. The relative increase depends on the
contents of the model as well, with the largest relative increase for the
IFC4 holter tower (h) model. The authors recommend to include inverse
attributes generally in the serialization to guarantee to able to effi-
ciently traverse building model subgraphs.
3.2.3.1. Chunk
size. In
HDF5,
rows
in
datasets
are
never
read
individually, but always in chunks of data. The size of the chunks in
configurable. Fig. 8c shows the effect of chunk size on resulting model
size. As chunk size approaches 1, the resulting model size increases
tenfold as the compression algorithm is no longer able to exploit
similarity with other instances – chunks are compressed individually.
There is also an amount of metadata associated with a chunk. For this
reason the HDF5 documentation recommends choosing a chunk size
that results in chunks of several megabytes in size. A chunk size of 1024
instances is used in this paper unless noted otherwise, as that
approximates the recommendation.
3.2.4. Access and processing times
In order to assess processing times in various use cases, four cases
are presented in which IFC models content are assessed, comparing
operation on IFC-SPF and IFC-HDF serialization.
For parsing IFC-SPF files, the open source IfcOpenShell software
library is used. For opening HDF5 only the HDF5 C++ library itself is
used. The self-documenting compound member names are sufficient to
interpret the data and yield readable source code without generating
code from the EXPRESS schema. The use of a generic library for the SPF
case does come with a slight overhead as generic approaches are ap-
plied that are not explicitly tailored to the use case at hand. For that
purpose, where possible, the performance of SPF is also assessed using a
text-based streaming tool (grep) which would approach the theoretical
optimum of operating on text-based line-formatted data.
3.2.4.1. Metadata
extraction:
distinct
entity
types. For
descriptive
purposes, it can be desirable to extract metadata that pertains to
technical details of the IFC file. The number of distinct ENTITY types
instantiated in a file reflects the diversity of information collected in the
model. The total number of instances is related to the size and Level Of
Development of a project. Metadata standards for IFC are proposed in
[5] and such measures using automated tools to summarize IFC
contents.
Exactly the kinds of operations operating on descriptive metadata
and small subsets of information exemplify the fundamental differences
in how the models are stored in the SPF and HDF serializations re-
spectively. SPF is a single continuous stream of ENTITY instances without
facilities for random-access reading as there are no guarantees on where
instances are placed within a file. On the other hand, HDF is a hier-
archically decomposed storage model, with instances organized based
on their ENTITY type and with metadata describing the amount of in-
stances and their layout within the file.
Fig. 9a shows the time spent on accumulating the total amount of
entity types on both an SPF and an HDF model. The resulting number of
bytes read is visualized in Fig. 9b. In the case of the SPF model every
instance needs to be read for the simple fact that there is no other way
to reliably sample the amount of ENTITY types. In case of the HDF5
model, the number of distinct ENTITY types naturally follows from the
hierarchy of datasets. No dataset contents needs to be inspected. Note
that in this section compressed hdf-standard models with a chunk
size of 1024 are used. In use cases solely operating on file metadata
there is no significant difference in specific HDF5 serialization options.
3.2.4.2. Metadata extraction: building storeys. The previous example
describes a technical metadata item. A more descriptive measure,
relating to the building rather than the data model, is the floor count,
or number of IFCBUILDINGSTOREYS within a file. In addition to using the
SPF parser to count number of occurrences, a textual approach is
provided here as well. The purely line-based approach is less resilient to
(fairly pathological) cases, giving incorrect results in several cases:
• the search string might occur in comments or in values for textural
attributes of other instances, resulting in a higher number of re-
ported building storeys
• there might be comments or white space interspersed with the ENTITY
names given in the SPF serialization, resulting a failure to identify
such definitions.
The text-based search tool, that has been used, is grep, an omni-
present tool from the GNU linux ecosystem [e.g. 23]. The major dif-
ference with text-based searching in the file as opposed to a proper
STEP parser is that there is a smaller constant time factor associated
with the processing of bytes. This originates from the fact that for
simple text matching: parenthesis do not need to be matched, attribute
values are not checked for correctness in accordance with the schema
and no graph of instances is built in memory. Interestingly Fig. 9d
shows that grep also reads fewer bytes than the equivalent program
with the IfcOpenShell SPF parser. This is due to the fact that grep can
read intermittent parts of the data and check for similarity with either
the beginning or the end of the search pattern. As expected, the pro-
gram based on grep is many times faster than the proper SPF parser,
but counting the number of floors remains a linear complexity
8 http://www.buildingsmart-tech.org/specifications/ifc-overview
specifies
that the .ifcZIP file format is required to use “PKZIP 2.04 g”, which is a
container format typically also using the DEFLATE algorithm. In this paper the
exact same compression implementation is used to eliminate bias introduced by
different implementations.
T. Krijnen and J. Beetz
Autom
ation in Construction 113 (2020) 103134
17
operation with respect to the size of the model, as opposed to the op-
eration on HDF5 serialized data, where only the metadata of the re-
levant dataset needs to be inspected which is a constant complexity
operation irrespective of the characteristics of the model. The dataset
metadata specifies the dataspace (or extent) of the data and is therefore
sufficient to derive the number of IFCBUILDINGSTOREY instances.
3.2.4.3. Explicit instance attributes: total window area. This example
reflects on the case of a simple query for IFC instance models that
also incorporates attribute values. The sum of window areas is to be
obtained, specified in terms of IFC attributes in (1).
×
w
w OVERALLHEIGHT
. OVERALLWIDTH
.
w
w
IFCWINDOW
(1)
Again, when operating on a SPF file, the entire file needs to be
parsed as there is no other way that guarantees visiting all IFCWINDOW-
instances. In HDF5, this is fundamentally different. With instances
grouped by their type in a known location in the file, exactly all and
only the window instances are read. Furthermore, this use case high-
lights another important characteristic of binary storage, that floating
point numerals can be read faster than from a decimal text re-
presentation in SPF files. Completely in line with the expectation it
becomes apparent (see Fig. 9e, f) that results vary substantially based
on the contents of the model. Compare for example the amount of bytes
read for model (b) and (h). Since (b) is purely a structural frame
(Fig. 1b) there is no window areas to be calculated.
3.2.4.4. Graph
traversal:
building
placement
coordinates. IFC
is
a
relational data model. A large part of attributes are references to
other instances. In SPF such references are encoded by unique numeric
identifiers preceded by a hash # sign. In the standard HDF serialization
these are represented by a pair of integers, specifying the dataset and
dataset row respectively. Compare Listing 1 and Listing 2 where the
IFCTRIMMEDCURVE.BASISCURVE reference is encoded as #122 and {12,0}
respectively.
In this case, the relative placement position of the building is
printed, which implies a traversal from IFCBUILDING → IFCLOCALPLACEMENT
→ IFCAXIS2PLACEMENT3D → IFCCARTESIANPOINT, all traversing over scalar
forward attributes. Fig. 9g shows a near constant processing time ir-
respective of size on the HDF serialization, which is exactly the aim, to
be able to slice to relevant data in constant time.
On the other hand the accompanying number of bytes read (9 g)
shows a varying number of bytes read for this program without an
immediately apparent reason to the authors. This is further examined in
Fig. 10a and b where on the horizontal axis the same program is pre-
sented for different chunk sizes. There is a general trend that towards
larger chunk sizes, processing takes longer and requires more bytes to
be read. However, this trend is not monotonically increasing and there
are some remarkable outliers, such as model (c) requiring more bytes to
be read for all chunk sizes and some models, such as (h) reducing the
amount of bytes read as chunk size increases.
The exact performance implications of detailed HDF5 parameters
are somewhat opaque. It is not always clear how these parameters in-
fluence each other due to the complexity of the file format and the
runtime characteristics of the HDF5 software library. There are other
low-level parameters that are not discussed in this paper, such as de-
fault heap sizes, compact group representations and sizes for chunk
caches. There is no need for the IFC-HDF standard to prescribe these
low-level parameters as programs can be agnostic about these settings.
The main observation is that the IFC-HDF serialization offers superior
performance compared to IFC-SPF regardless of these tuning para-
meters. For the (h) model a processing time of 3.51 milliseconds is
obtained 15.6 s on SPF with only 35 kb out of the full 281,376 kb read.
This last use case (d) is the only case in which a comparison of the
three profiles shows slight differences, as it's the most complex access
pattern and involves following instance references. In line with ex-
pectations, the referenced profile requires the most bytes to be read
compared to the other two profiles. This stems from the fact that in-
stance references take up more space in this profile. There is only a
minimal increase in processing time compared to the standard profile,
but this difference is likely to be exaggerated when more references and
aggregates of references are to be followed. The padded requires the
least bytes to be read and is faster as more data is internalized into the
dataset contents rather than in the external heap structure. Note that all
three HDF-based profiles result in profound improvements over the
alternative of operating on SPF.
4. Use cases
The previous sections described technical measures, such as file size
and access times, on the HDF5-based binary serialization proposed in
this paper. The following sections describe additional use cases that are
enabled by this binary serialization.
4.1. Heterogeneous large volume data
In Krijnen and Beetz [9] (Fig. 11) the HDF5 serialization is used to
embed detailed point clouds scans into IFC building models. The sto-
rage implications are compared to the textual SPF serialization and
prototypes on the augmented schema highlight that indeed IFC files
with hundreds of gigabytes of data remain feasible and that perfor-
mance of reading the semantic structure is unaffected by large point
cloud contents due to the compartmentalized hierarchical storage.
Sensor measurements are another use case for detailed large-volume
data capturing and storage coupled to IFC instance data. Specifically for
the purpose of real-time data and part of the family of higher-level
interfaces, Folk et al. [14] discusses the availability of the HDF5 Packet
Table interface. This interface is specifically tailored to write real-time
streaming packets of measurement data.
The available software implementations for HDF5 connect to sci-
entific and numerical computing frameworks such as Numpy and
MATLAB and therefore enable data scientists to operate on and analyze
the large datasets contained in HDF5 files.
4.2. Federation of aspect models
In this construction industry, practitioners have adopted the notion
of aspect-, domain-, or discipline models [24]. These models represent
parts of the overall model and are often the product of a single dis-
cipline. The advantage of this approach is that individual stakeholders
are able to model in their own preferred authoring tools and export to
IFC for the purpose of coordination and information exchange. It does
require collaboration upfront so that the set of aspect models align
geometrically and semantically to form a consistent whole.
HDF5 offers interesting primitives to support a federated way of
working. The referenced profile presented in this paper (Section 3.1.3)
has been conceived to facilitate interlinking domain models. Within an
IFC file, there is a typical hierarchy of spatial structuring nodes that
govern the decomposition structure of the building and embed the
building model into its geospatial context. The typical hierarchy is
IFCPROJECT → IFCSITE → IFCBUILDING → IFCBUILDINGSTOREY. Currently this
structure is duplicated among all aspect models, requiring precise in-
spection to make sure this decomposition aligns and impedes easy na-
vigation.
With information distributed over separate IFC instance models, it is
hard to establish relationships between the various aspects of a shared
elements. Disciplines typically model different perspectives to the same
elements, but equivalences between cannot be established as EXPRESS
has no native mechanisms to establish links to other files. For that
purpose, research such as Törmä [25] embraces semantic web principles
and the ifcOwl ontology, as exactly relationships and networked
T. Krijnen and J. Beetz
Autom
ation in Construction 113 (2020) 103134
18
resources are the primitive building block of the semantic web.
Fig. 12 documents the structure of a resulting merged model in
HDF5 in which three discipline models are combined and a shared
hierarchy is identified.9 Because of the usage of the referenced profile,
each of the constituents can have their own set of definitions. For ex-
ample every constituent has their own set of IFCAXIS2PLACEMENT3D, as
opposed to the other two serialization profiles in which, due to the
numeric structure for instance references, dataset types need to be
unique.
The original IFC-SPF input files are 3.90 MB 10.5 MB 39.9 MB re-
spectively,10 the resulting HDF file is 150 MB. As seen from Fig. 8a the
hdf-referenced profile is expected to result in larger files as com-
pared to the spf serialization. In addition extra reservations have to be
made to allocate space for the shared hierarchy. The resulting file has
been published as part of the dataset of resulting files.11 Currently, none
of the preexisting file-based serialization formats has support for this
kind of aggregation of distinct aspect models (Fig. 13).
4.3. Multiple levels of detail
IFC building models can have varying Levels of Detail, ranging from
an overview of functional space volumes to detailed engineering models
with precise geometries for individual screws and reinforcements
within concrete bars. For downstream processing of building models,
this latter amount of geometric detail is sometimes unnecessary and can
be prohibitive for effective exchanges. Such precise geometry defini-
tions are not necessary, for example, when determining building ele-
ment quantities or inspecting whether the correct property definitions
are used. The amount of processing, though, involved in evaluating the,
often implicit, kind of geometries into explicit geometries suitable for
visualization can be immense, as complicated trees of boolean opera-
tions need to be evaluated. For such use cases a rough spatial overview
can be sufficient.
The Level Of Development, for example specified in Reinhard et al.
[26], is a concept of increasing amount of information and detail as the
project continues from initially coarse to more specified as the project is
handed over.
Currently, little mechanisms exist to store a set of varying re-
presentations for a given building model side-by-side. This paper as-
sesses the possibilities of using the HDF5 mounting capabilities to form
a complete building model representation by choosing from a set of
available definitions of information.
Specifically for this evaluation, the conference center model (b) is
chosen and segmented over three distinct sets of types, these are dis-
played with their relationships in Fig. 14. These include the building
elements in main, the properties, property sets, materials, quantities in
properties and the body of representations and representation items in
geometry. These original geometries are of various forms, including
trees of boolean operations, explicit face sets and extrusions. From these
geometry definitions, a set of bounding boxes is generated for each
element individually. In this way, recipients of the building model are
given means to incorporate exactly what they need in their apprehen-
sion of the overall building model. Or, conversely, senders of the
building model can give different access right to parts of the model if
required so. The fact that the bounding boxes alone result in a rea-
sonable geometric overview at minimal file size is presented in Fig. 15.
4.4. Containerized release packages
In the construction industry, information is handed over to different
stakeholders at varying points in the construction life cycle. The
handovers have a legal status and consist of heterogeneous forms of
information, including a building model, textual specifications and
more. The hierarchical structure of HDF5 enables to store additional
information alongside the building model serialization that is foreign to
the IFC schema. By means of the region references explicit links between
IFC building elements and foreign forms of documentation can be es-
tablished. The standard general purpose “HDFView” has excellent
support for viewing image and text data embedded in HDF5 datasets
and can extract other types of documents to the file system for inter-
facing with other applications such as document viewers. As such a
comprehensive building model documentation can be provided by
means of a single interlinked resource.
4.5. Archival and digital preservation
Folk and Pourmal [27] specifically reflects on archival and digital
preservation and discusses the implications for the design of HDF5.
Beetz et al. [5] describes the requirements and contributions to Long
Term Digital Preservation (LTDP) tailored to building models and their
contextual information. In line with common terminology, both de-
scribe preservation according to three independent levels: (a) the
physical bit-stream (b) the logical bit-stream and (c) semantics. The
HDF5 checksum filters can contribute to logical preservation by assessing
the integrity of dataset contents. A checksum emits a code that is derived
from the stream of binary data. The self-describing nature of HDF5 and
embedded structural semantics of the EXPRESS schema within the po-
pulation contribute to semantic preservation. Physical preservation is a
concern of the storage medium and therefore not addressed by a file
format. To exemplify the need for self-describing capabilities, consider
for example to the definition from IFC-SPF adapted from the holter tower
(h) model in Listing 6. Clueless future readers of the document can only
guess what particular attribute values mean as the schema is stored
separately from population.
Confusion on the exact schema in model populations is not a un-
realistic scenario as there are multiple versions of the schema releases
with the same schema identifier. The IFC4 schema has seen two ad-
denda at the time of writing, the IFC2X3 schema has had one technical
corrigendum. In all three of these cases the schema identifier has been
reused, rendering it impossible for importing applications to know the
exact schema used for serialization.
Listing 6. Fragment of IFC-SPF illustrating the need for a schema to
understand attribute values.
5. Conclusion
With the binary and hierarchically structured serialization format
described and assessed in this paper, profound reductions of access and
processing times have been obtained compared to the currently pre-
valent IFC-SPF and other text-based encodings. The performance im-
provements stem from (a) on the one hand a linear improvement factor
due to the native binary datatypes and (b) more fundamentally the
known location of entity instances in the file and (c) the ability to in-
clude inverse attributes in the serialization. The performance im-
provements lead to near constant-time retrieval of individual known
entity instances from populations. To tailor performance and features to
9 The identification of a shared hierarchy is based on a comparison function
specific to the hierarchy nodes in an IFC file. For example, IFCBUILDINGSTOREY
instances are considered equal when their ELEVATION matches.
10 https://www.nibs.org/page/bsa_commonbimfiles?#project2
11 https://doi.org/10.5281/zenodo.1172519
T. Krijnen and J. Beetz
Autom
ation in Construction 113 (2020) 103134
19
specific use cases, three serialization profiles are provided: standard,
padded and referenced.
Some of the freeform constructs in IFC, such as variable length lists
and SELECT structures are elegantly encoded in clear-text formats in
terms of storage space. The use of delimiters around elements in vari-
able length constructs and dynamically typed attributes enables IFC-
SPF to be flexible in these situations. In HDF5 datasets, attribute types
need to be consistent for the entire population and hence mechanisms
are in place to allocate space for all permutations of concrete attribute
values. Variable length types such as lists are located in a separate
structure without support for compressions. While a standard HDF5
serialization with compression is more succinct then an IFC-SPF seri-
alization, ifcZIP a compressed IFC-SPF results in smaller files than a
standard profile HDF5 serialization. This can be seen in Table 3, where
ifcZIP yields file sizes of 13.8% to 21.9% of the original IFC-SPF,
whereas for HDF5 this is 55.8% to 95.2%, the latter for the smallest file
where the constant size overhead in fixed size allocations for file
headers, schema meta-data and dataset padding is relatively most
pronounced. If minimal file size is a consideration the padded profile
can be employed which yields a file size of 11.2% of the original SPF
encoding and less than ifcZIP. This is accomplished by eliminating the
use of separate storage structures and transparently applied block-level
compression algorithms.
A reduction in file size is not the predominant aim for introducing
this format. More relevant benefits are the reduced seek times, storage
of heterogeneous information and more resilient storage due to em-
bedded schema and options for integrity verification with checksums.
The traversal of inverse attributes is necessary for efficiently navi-
gating subgraphs within larger building model populations. Otherwise
all relationship nodes would have to be consumed in order to construct
the relationships in backwards direction. Because inverse attributes are
often of a variable length type, for which there is an additional storage
overhead in HDF5, the relative increase in file size for incorporating
inverse attribute is not negligible, especially in the standard and
referenced profiles. For the padded profile the relative increase
gravitates towards 1.4% for the largest models (Table 4) with (h) being
an outlier. Model (h) is an IFC4 file, in which the number of inverse
attributes has been increased.
The most profound improvement over the state of the art is the
reduction of access times (Table 5 a) to specific information within the
file compared to the current text-based formats. For the most complex
query on the simplest file the processing time is reduced to 3.54% of the
original on spf, the simplest query on the largest file only takes
0.00665% compared to the state of the art. Use cases such as partial
visualization, queries and the extraction of aspect models all benefit
from this reduction. The performance characteristics are assessed by
Table 3
Overview of file sizes for different serialization options, percentages are given relative to IFC-SPF.
File size (KB)
SPFa
ifcZIPb
HDFc
HDFd
HDFe
(a)
1617
336
20.8%
1540
95.2%
700
43.3%
4668
288%
(b)
4164
844
20.3%
3440
82.6%
1012
24.3%
10,552
253%
(c)
6298
1172
18.6%
4640
73.7%
1224
19.4%
15,540
246%
(d)
12,898
2828
21.9%
9448
73.3%
2980
23.1%
34,916
270%
(e)
48,131
8528
17.7%
39,748
82.6%
8256
17.2%
97,552
202%
(f)
51,618
9092
17.6%
36,092
69.9%
5976
11.6%
118,392
229%
(g)
68,678
13,212
19.2%
38,316
55.8%
7784
11.3%
168,956
246%
(h)
173,306
32,924
19.0%
126,132
72.8%
20,108
11.6%
351,476
202%
(i)
281,376
38,692
13.8%
169,968
60.4%
31,548
11.2%
493,612
175%
a ‘normalized’ IFC-SPF encoding, comments and unnecessary white space removed except for a newline character after every instance declaration and header
construct.
b ‘normalized’ IFC-SPF, gzip −9 compression.
c Standard profile, gzip −9 compression, chunk-size 1024, without inverse.
d Padded profile, gzip −9 compression, chunk-size 1024, without inverse.
e Referenced profile, gzip −9 compression, chunk-size 1024, without inverse.
Table 4
Overview of file sizes for different serialization options, percentages signify the relative increase in file size for the inclusion of inverse attributes.
file size (KB)
HDF(1)
HDF(2)
HDF(3)
w/
w/o
w/
w/o
w/
w/o
(a)
1540
1884
+22.3%
700
796
+13.7%
4668
5456
+16.9%
(b)
3440
4492
+30.6%
1012
1152
+13.8%
10,552
15,188
+43.9%
(c)
4640
5344
+15.2%
1224
1304
+6.5%
15,540
18,208
+17.2%
(d)
9448
10,868
+15.0%
2980
3208
+7.7%
34,916
41,904
+20.0%
(e)
39,748
41,336
+4.0%
8256
8404
+1.8%
97,552
104,972
+7.6%
(f)
36,092
40,140
+11.2%
5976
6136
+2.7%
118,392
134,516
+13.6%
(g)
38,316
40,988
+7.0%
7784
8052
+3.4%
168,956
179,024
+6.0%
(h)
126,132
153,748
+21.9%
20,108
21,448
+6.7%
351,476
460,708
+31.1%
(i)
169,968
172,868
+1.7%
31,548
31,984
+1.4%
493,612
506,016
+2.5%
1 standard profile
2 padded profile
3 referenced profile
T. Krijnen and J. Beetz
Autom
ation in Construction 113 (2020) 103134
20
means of four use cases comparing IFC-SPF and the proposed HDF5
serialization. Several use cases show how tasks can be completed in a
constant time irrespective of the size of the overall population, whereas
for IFC-SPF the complete file needs to be parsed. Indicative of this
performance improvement is the number of bytes read during the op-
eration (Table 5 b). For some tasks, such as descriptive statistics on the
counts of certain elements, in particular case a, can be resolved solely
looking at metadata records within the IFC file and the number of bytes
read is constant (apart from minor deviations in the layout of the file
header). Note that these assessments focus on data retrieval and include
little to no computation. For other tasks in industry, such as partial
visualization, less pronounced differences are expected as more com-
putation is involved.
In addition to file size and performance assessment, several features
of the HDF5 format are shown to address specific use cases within the
construction industry. For the integration of aspect models the re-
ferenced profile is used to aggregate several distinct aspect models
into a single cohesive interlinked whole, making use of HDF5 groups
and region references. Levels of detail can be selected by means of
mounting modular subgraphs. These can be geometry definitions in
higher or lower levels of detail or isolated modules from the IFC schema
such as explicit quantities or relational semantics.
The reference implementation of the IFC-SPF to HDF5 conversion is
available on-line under an open source license.12
5.1. Reflection
Over the course of writing this and other papers, significant ex-
perience with the HDF5 software ecosystem has been gained. It is the
impression of the authors that within the scientific computing com-
munity there is on average a positive appreciation of HDF5 and it's aims
to be an open standard for large scientific datasets. Negative sentiments
are also encountered13 and can be summarized into the aspects listed
below.
1. Stability of the software library
The authors did experience issues with the Python library for HDF5
h5py and its support for the complex datatypes required by the
EXPRESS mapping. These issues are fairly specific and can be re-
solved in the future. The authors did not experience issues with the
main HDF5 library in the C programming language. This shows
there are no structural flaws in the specification and main im-
plementation.
2. The HDF5 standard is a complex engineering project and a single
point of failure due to the fact there is only one mature im-
plementation
The concerns of complexity are shared by the authors, but is seen as
a necessary consequence of the fact that performant and inter-
operable binary data is a complicated problem. Developing the
binary storage format for IFC based on an intricate and evolving
piece of technology is not trivial. A subset of features needs to be
chosen that is likely to persist in future versions of the software.
3. Performance tuning on HDF5 is unpredictable
As mentioned in [27] the feature set and characteristics of HDF5 are
a result of the aim to balance performance with suitability for long-
term digital preservation and semantic storage. Those aims match
the requirements of an EXPRESS-based standard such as IFC. At the
same time, the need for automatic tuning frameworks [28] shows
that performance characteristics are not always a predictable out-
come of the settings of HDF5 and the operating system. This is
something also experienced and documented by the authors in
Section 3.2.4. However these are micro fluctuations compared to the
profound reduction in processing times when comparing to opera-
tions on SPF data. HDF5 performs similarly to other scientific sto-
rage formats such as the older FITS [29].
During implementation of the various software prototypes the au-
thors found that writing software to serialize IFC data in HDF5 is a
relatively complex task. A fair amount of late-bound14 schema knowl-
edge is required to generate HDF5 datatypes from the schema defini-
tions and especially the padded profile requires extra steps to determine
datatype widths for variable length attributes. Conversely, due to the
self-documenting nature, rich type system and supporting libraries in
various programming languages, reading IFC-HDF serialized building
models is found to be simpler than parsing IFC-SPF documents. This
asymmetry in implementation complexity is something that connects
well to the current state of the construction industry with a handful of
Table 5
Overview of access times (a) and bytes read (b) for four assessed use cases.
(a) Access times (seconds)
SPF
HDF
hdf/spf·100%
Min
Median
Max
Min
Median
Max
Min
Median
Max
a
0.0907
2.56
15.6
0.000913
0.00096
0.00104
1.01
0.0375
0.00665
b
0.0908
2.56
15.6
0.000975
0.00137
0.00142
1.07
0.0535
0.00911
c
0.0910
2.56
15.6
0.00116
0.00214
0.00259
1.27
0.0836
0.0166
d
0.0911
2.56
15.6
0.00323
0.0036
0.00385
3.54
0.141
0.0248
(b) Bytes read
SPF
HDF
HDF/SPF·100%
Min
Median
Max
Min
Median
Max
Min
Median
Max
a
1.66 ⋅ 106
4.93 ⋅ 107
2.88 ⋅ 108
1120
1120
1290
0.0674
0.00227
0.000448
b
1.66 ⋅ 106
4.93 ⋅ 107
2.88 ⋅ 108
2290
5810
10,800
0.138
0.0118
0.00376
c
1.66 ⋅ 106
4.93 ⋅ 107
2.88 ⋅ 108
2290
10,100
43,700
0.138
0.0206
0.0152
d
1.66 ⋅ 106
4.93 ⋅ 107
2.88 ⋅ 108
24,200
67,100
118,000
1.46
0.136
0.0411
12 https://doi.org/10.5281/zenodo.1173008
13 See https://news.ycombinator.com/item?id=10858189 for example for a
relatively balanced discussion
14 Late-bound refers to the schema information being available at run-time,
i.e. when the program is executed, not when it is compiled from source code.
T. Krijnen and J. Beetz
Autom
ation in Construction 113 (2020) 103134
21
large vendors that develop BIM authoring tools and a multitude of
smaller companies that parse IFC for downstream processing and (web-
based) coordination tools. Also note that for the standard profile, the
IFC schema can be distributed in the form of HDF5 datatypes, which
would remove the additional implementation effort of schema mapping
for individual implementers and creates an unambiguous general ven-
ture point for creating instance models to be used by all authoring tools.
5.2. Recommendations
Based on the findings in this paper, the authors recommend ser-
iously investigating IFC-HDF as an addition to the currently mandated
IFC serialization formats (SPFF, SPFF zipped, XML, RDF/OWL).
The main application area of this proposed format, where current
serialization formats are lacking, is in archival, portable efficient da-
tabases, data delivery and machine learning on large datasets. The
pairing with semantic web services for querying and validation [19] are
promising, but at this moment experimental.
The proven performance improvements described in this paper will
benefit the industry as a whole. At the same time some of the usage
scenarios outlined in this paper, such as better connection to industry
standard data analytics platforms (Matlab and Numpy/Python) by means
of the HDF5 software library bindings, will be of benefit mostly to an
advanced user base. Furthermore, not all information needs are strictly
subsets of a multi-disciplinary base model that can be extracted post-
hoc. Some model views have conflicting export options, such as “first
level” as opposed to “second level” space boundaries or the option to
export
the
structure
of
a
compound
wall
layer
as
either
a
IFCMATERIALLAYERSET or a decomposition into IFCBUILDINGELEMENTPARTS.
Therefore, standardized information needs or MVDs are not superseded
by the approaches sketched in this paper. Although, there is a risk that
superfluous incompatible model views will likely limit interoperability.
Risks related to HDF5 are mostly identified in that there is only one
single predominant comprehensive implementation, with limited sup-
port for complex data types in some of the wrapped languages. There
will likely be a lack of initial implementation support (as opposed to
something more container-based such as Information Container for
Data Drop (ICDD)15 where data exchange is more akin to a conven-
tional compressed archive of model files and hence the constituents are
directly readable by existing tools).
Another concern might be that when incremental and transactional
exchanges become more commonplace in the construction industry,
HDF5 is essentially still file-based technology and support for mutating
data is present, but limited. For example datasets can be sized dyna-
mically to increase in size, but freeing space within a file when data is
deleted is not an automatic process, but a tool called h5repack can be
used to create a compact copy of a file.
The advantages of the HDF5 serialization include a pre-existing
robust implementation (as opposed to creating a bespoke format for
IFC), a complete and fairly idiomatic mapping from EXPRESS (as op-
posed to mappings to relational databases such as SQLite) and partial
decompression as granular as sections of a file (as opposed to current
container-based approaches).
Declaration of competing interest
The authors declare that they have no known competing financial
interests or personal relationships that could have appeared to influ-
ence the work reported in this paper.
Acknowledgments
This work has been partially funded by the EU FP7 project
“DURAARK”, grant agreement 600908.
References
[1] M. Weise, P. Katranuschkov, R.J. Scherer, Generalised model subset definition
schema, Proceedings of the CIB W78’s 20th International Conference on
Construction IT, Construction IT Bridging the Distance, CIB Report 284, 2003, pp.
440–448.
[2] Y.-C. Lee, C.M. Eastman, W. Solihin, R. See, Modularized rule-based validation of a
BIM model pertaining to model views, Autom. Constr. 63 (2016) 1–11 (doi:-
j.autcon.2015.11.006).
[3] W. Mazairac, J. Beetz, BIMQL – an open query language for building information
models, Adv. Eng. Inform. 27 (2013) 444–456, https://doi.org/10.1016/j.aei.2013.
06.001.
[4] S. Daum, A. Borrmann, Processing of topological BIM queries using boundary re-
presentation based methods, Adv. Eng. Inform. 28 (2014) 272–286, https://doi.
org/10.1016/j.aei.2014.06.001.
[5] J. Beetz, I. Blümel, S. Dietze, B. Fetahui, U. Gadiraju, M. Hecher, T. Krijnen,
M. Lindlar, M. Tamke, R. Wessel, R. Yu, Enrichment and preservation of archi-
tectural knowledge, in: S. Münster, M. Pfarr-Harfst, P. Kuroczyski, M. Ioannides
(Eds.), 3D Research Challenges in Cultural Heritage II, Lecture Notes in Computer
Science, Springer, 2016, pp. 231–255, , https://doi.org/10.1007/978-3-319-47647-
6_11.
[6] K.A. Ohori, F. Biljecki, A. Diakité, T. Krijnen, H. Ledoux, J. Stoter, Towards an
integration of GIS and BIM data: What are the geometric and topological issues?
12th 3D Geoinfo Conference, volume 4, ISPRS, 2015, pp. 1055–1075, , https://doi.
org/10.5194/isprs-annals-IV-4-W5-1-2017.
[7] J. Oldfield, P. van Oosterom, J. Beetz, T.F. Krijnen, Working with Open BIM stan-
dards to source legal spaces for a 3D cadastre, ISPRS Int. J. Geo Inf. 6 (2017) 351,
https://doi.org/10.3390/ijgi6110351.
[8] T. Krijnen, M. Tamke, Assessing implicit knowledge in BIM models with machine
learning, Modelling Behaviour, Springer, 2015, pp. 397–406, , https://doi.org/10.
1007/978-3-319-24208-8_33.
[9] T. Krijnen, J. Beetz, An IFC schema extension and binary serialization format to
efficiently integrate point cloud data into building models, Adv. Eng. Inform. 33
(2017) 473–490, https://doi.org/10.1016/j.aei.2017.03.008.
[10] X. Liu, B. Akinci, Requirements and evaluation of standards for integration of sensor
data with building information models, Computing in Civil Engineering (2009),
2009, pp. 95–104, , https://doi.org/10.1061/41052(346)10.
[11] Y.-C. Lee, C.M. Eastman, J.-K. Lee, Validations for ensuring the interoperability of
data exchange of a building information model, Autom. Constr. 58 (2015) 176–195,
https://doi.org/10.1016/j.autcon.2015.07.010.
[12] K. Afsari, C.M. Eastman, D. Castro-Lacouture, JavaScript object notation (JSON)
data serialization for IFC schema in web-based BIM data exchange, Autom. Constr.
77 (2017) 24–51, https://doi.org/10.1016/j.autcon.2017.01.011.
[13] P. Pauwels, W. Terkaj, EXPRESS to OWL for construction industry: towards a re-
commendable and usable ifcowl ontology, Autom. Constr. 63 (2016) 100–133,
https://doi.org/10.1016/j.autcon.2015.12.003.
[14] M. Folk, G. Heber, Q. Koziol, E. Pourmal, D. Robinson, An overview of the HDF5
technology suite and its applications, Proceedings of the EDBT/ICDT 2011
Workshop on Array Databases, ACM, 2011, pp. 36–47, , https://doi.org/10.1145/
1966895.1966900.
[15] T. Bertin-Mahieux, D.P. Ellis, B. Whitman, P. Lamere, The Million Song Dataset, in:
ISMIR 2011: Proceedings of the 12th International Society for Music Information
Retrieval Conference, October 24–28, 2011, University of Miami, Miami, Florida,
2011, pp. 591–596, https://doi.org/10.7916/D8NZ8J07.
[16] J. Gray, D.T. Liu, M. Nieto-Santisteban, A. Szalay, D.J. DeWitt, G. Heber, Scientific
data management in the coming decade, ACM SIGMOD Rec. 34 (2005) 34–41,
https://doi.org/10.1145/1107499.1107503.
[17] M.T. Dougherty, M.J. Folk, E. Zadok, H.J. Bernstein, F.C. Bernstein, K.W. Eliceiri,
W. Benger, C. Best, Unifying biological image formats with HDF5, Commun. ACM
52 (2009) 42–47, https://doi.org/10.1145/1562764.1562781.
[18] P. Pauwels, T. Krijnen, W. Terkaj, J. Beetz, Enhancing the ifcOWL ontology with an
alternative representation for geometric data, Autom. Constr. 80 (2017) 77–94,
https://doi.org/10.1016/j.autcon.2017.03.001.
[19] T. Krijnen, J. Beetz, A SPARQL query engine for binary-formatted IFC building
models, Autom. Constr. 95 (2018) 46–63 (doi:j.autcon.2018.07.014).
[20] M. Folk, V. Choi, Scientific formats for geospatial data preservation: a study of
suitability and performance, Online, 2004. https://www.hdfgroup.org/projects/
nara/Sci_fmts_and_geodata_HDF.pdf;.
[21] J. Ziv, A. Lempel, Compression of individual sequences via variable-rate coding,
IEEE Trans. Inf. Theory 24 (1978) 530–536, https://doi.org/10.1109/TIT.1978.
1055934.
[22] D.A. Huffman, A method for the construction of minimum-redundancy codes,
Proceedings of the IRE, IEEE, 1952, pp. 1098–1101, , https://doi.org/10.1109/
JRPROC.1952.273898.
[23] M. Crochemore, W. Rytter, Text Algorithms, Oxford University Press, New York,
NY, United States, 1994.
[24] L. Van Berlo, J. Beetz, P. Bos, H. Hendriks, R. Van Tongeren, Collaborative en-
gineering with IFC: New insights and technology, in: G. Gudnason, R. Scherer
(Eds.), 9th European Conference on Product and Process Modelling, Iceland,
15 A standard currently in development as ISO 21597 https://www.iso.org/
standard/74389.html
T. Krijnen and J. Beetz
Autom
ation in Construction 113 (2020) 103134
22
Routledge Taylor&Francis Group, United Kingdom, 2012, pp. 811–818.
[25] S. Törmä, Semantic linking of building information models, Semantic Computing
(ICSC), 2013 IEEE Seventh International Conference on, IEEE, 2013, pp. 412–419, ,
https://doi.org/10.1109/ICSC.2013.80.
[26] J. Reinhard, J. Bedrick, W. Ikerd, D. Merrifield, J. Vandezande, J. McFarland,
R. Dellaria, B. Filkins, B. Skripac, K. Flannigan, B. Foster, D. Francis, G. Madsen,
D. Merrifield, C.G. Roberts, Level of development specification: part I, 2017, Online
http://bimforum.org/wp-content/uploads/2017/11/LOD-Spec-2017-Part-I-2017-
11-07-1.pdf; , Accessed date: 1 February 2020.
[27] M. Folk, E. Pourmal, Balancing performance and preservation lessons learned with
HDF5, Proceedings of the 2010Roadmap for Digital Preservation Interoperability
FrameworkWorkshop, US-DPIF '10, ACM, New York, NY, USA, 2010, pp. 11:1–11:8,
, https://doi.org/10.1145/2039274.2039285.
[28] B. Behzad, J. Huchette, H. V. T. Luu, R. Aydt, S. Byna, Y. Yao, Q. Koziol, Prabhat, A
framework for auto-tuning HDF5 applications, in: Proceedings of the 22nd
International Symposium on High-Performance Parallel and Distributed
Computing, ISBN 978-1-4503-1910-2, Association for Computing Machinery, New
York, NY, USA, 2013, pp. 127–128. doi:https://doi.org/10.1145/2493123.
2462931.
[29] D. Price, B. Barsdell, L. Greenhill, HDFITS: porting the FITS data model to HDF5,
Astronomy and Computing 12 (2015) 212–220, https://doi.org/10.1016/j.ascom.
2015.05.001.
T. Krijnen and J. Beetz
Autom
ation in Construction 113 (2020) 103134
23



